module Evergreen.Migrate.V108 exposing (..)

{-| This migration file was automatically generated by the lamdera compiler.

It includes:

  - A migration for each of the 6 Lamdera core types that has changed
  - A function named `migrate_ModuleName_TypeName` for each changed/custom type

Expect to see:

  - `Unimplement–µd` values as placeholders wherever I was unable to figure out a clear migration path for you
  - `@NOTICE` comments for things you should know about, i.e. new custom type constructors that won't get any
    value mappings from the old type by default

You can edit this file however you wish! It won't be generated again.

See <https://dashboard.lamdera.app/docs/evergreen> for more info.

-}

import Array
import Dict
import Evergreen.V104.AiChat
import Evergreen.V104.ChannelName
import Evergreen.V104.Coord
import Evergreen.V104.CssPixels
import Evergreen.V104.DmChannel
import Evergreen.V104.Editable
import Evergreen.V104.EmailAddress
import Evergreen.V104.Emoji
import Evergreen.V104.FileName
import Evergreen.V104.FileStatus
import Evergreen.V104.Geometry.Types
import Evergreen.V104.GuildName
import Evergreen.V104.Id
import Evergreen.V104.Internal.Model2
import Evergreen.V104.Internal.Teleport
import Evergreen.V104.Local
import Evergreen.V104.LocalState
import Evergreen.V104.Log
import Evergreen.V104.LoginForm
import Evergreen.V104.Message
import Evergreen.V104.MessageInput
import Evergreen.V104.MessageView
import Evergreen.V104.NonemptyDict
import Evergreen.V104.NonemptySet
import Evergreen.V104.OneOrGreater
import Evergreen.V104.Pages.Admin
import Evergreen.V104.Pagination
import Evergreen.V104.PersonName
import Evergreen.V104.Point2d
import Evergreen.V104.Ports
import Evergreen.V104.Postmark
import Evergreen.V104.RichText
import Evergreen.V104.Route
import Evergreen.V104.SecretId
import Evergreen.V104.SessionIdHash
import Evergreen.V104.Slack
import Evergreen.V104.Table
import Evergreen.V104.Touch
import Evergreen.V104.TwoFactorAuthentication
import Evergreen.V104.Types
import Evergreen.V104.Ui.Anim
import Evergreen.V104.User
import Evergreen.V104.UserAgent
import Evergreen.V104.UserSession
import Evergreen.V104.VisibleMessages
import Evergreen.V108.AiChat
import Evergreen.V108.ChannelName
import Evergreen.V108.Coord
import Evergreen.V108.CssPixels
import Evergreen.V108.DmChannel
import Evergreen.V108.Editable
import Evergreen.V108.EmailAddress
import Evergreen.V108.Emoji
import Evergreen.V108.FileName
import Evergreen.V108.FileStatus
import Evergreen.V108.Geometry.Types
import Evergreen.V108.GuildName
import Evergreen.V108.Id
import Evergreen.V108.Internal.Model2
import Evergreen.V108.Internal.Teleport
import Evergreen.V108.Local
import Evergreen.V108.LocalState
import Evergreen.V108.Log
import Evergreen.V108.LoginForm
import Evergreen.V108.Message
import Evergreen.V108.MessageInput
import Evergreen.V108.MessageView
import Evergreen.V108.NonemptyDict
import Evergreen.V108.NonemptySet
import Evergreen.V108.OneOrGreater
import Evergreen.V108.Pages.Admin
import Evergreen.V108.Pagination
import Evergreen.V108.PersonName
import Evergreen.V108.Point2d
import Evergreen.V108.Ports
import Evergreen.V108.Postmark
import Evergreen.V108.RichText
import Evergreen.V108.Route
import Evergreen.V108.SecretId
import Evergreen.V108.SessionIdHash
import Evergreen.V108.Slack
import Evergreen.V108.Table
import Evergreen.V108.Touch
import Evergreen.V108.TwoFactorAuthentication
import Evergreen.V108.Types
import Evergreen.V108.Ui.Anim
import Evergreen.V108.User
import Evergreen.V108.UserAgent
import Evergreen.V108.UserSession
import Evergreen.V108.VisibleMessages
import Lamdera.Migrations exposing (..)
import List
import List.Nonempty
import Maybe
import Quantity
import SeqDict
import SeqSet


frontendModel : Evergreen.V104.Types.FrontendModel -> ModelMigration Evergreen.V108.Types.FrontendModel Evergreen.V108.Types.FrontendMsg
frontendModel old =
    ModelMigrated ( migrate_Types_FrontendModel old, Cmd.none )


backendModel : Evergreen.V104.Types.BackendModel -> ModelMigration Evergreen.V108.Types.BackendModel Evergreen.V108.Types.BackendMsg
backendModel old =
    ModelUnchanged


frontendMsg : Evergreen.V104.Types.FrontendMsg -> MsgMigration Evergreen.V108.Types.FrontendMsg Evergreen.V108.Types.FrontendMsg
frontendMsg old =
    MsgMigrated ( migrate_Types_FrontendMsg old, Cmd.none )


toBackend : Evergreen.V104.Types.ToBackend -> MsgMigration Evergreen.V108.Types.ToBackend Evergreen.V108.Types.BackendMsg
toBackend old =
    MsgUnchanged


backendMsg : Evergreen.V104.Types.BackendMsg -> MsgMigration Evergreen.V108.Types.BackendMsg Evergreen.V108.Types.BackendMsg
backendMsg old =
    MsgUnchanged


toFrontend : Evergreen.V104.Types.ToFrontend -> MsgMigration Evergreen.V108.Types.ToFrontend Evergreen.V108.Types.FrontendMsg
toFrontend old =
    MsgUnchanged


migrate_AiChat_AiModelsStatus : Evergreen.V104.AiChat.AiModelsStatus -> Evergreen.V108.AiChat.AiModelsStatus
migrate_AiChat_AiModelsStatus old =
    case old of
        Evergreen.V104.AiChat.LoadingAiModels ->
            Evergreen.V108.AiChat.LoadingAiModels

        Evergreen.V104.AiChat.LoadedAiModels p0 ->
            Evergreen.V108.AiChat.LoadedAiModels p0

        Evergreen.V104.AiChat.LoadingFailed p0 ->
            Evergreen.V108.AiChat.LoadingFailed p0


migrate_AiChat_FrontendModel : Evergreen.V104.AiChat.FrontendModel -> Evergreen.V108.AiChat.FrontendModel
migrate_AiChat_FrontendModel old =
    { message = old.message
    , chatHistory = old.chatHistory
    , pendingResponses = old.pendingResponses |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_AiChat_ResponseId migrate_AiChat_PendingResponse) |> SeqDict.fromList
    , responseCounter = old.responseCounter
    , showOptions = old.showOptions
    , selectedModel = old.selectedModel
    , userPrefix = old.userPrefix
    , botPrefix = old.botPrefix
    , debounceCounter = old.debounceCounter
    , sendMessageWith = old.sendMessageWith |> migrate_AiChat_SendMessageWith
    , aiModels = old.aiModels |> migrate_AiChat_AiModelsStatus
    }


migrate_AiChat_Msg : Evergreen.V104.AiChat.Msg -> Evergreen.V108.AiChat.Msg
migrate_AiChat_Msg old =
    case old of
        Evergreen.V104.AiChat.TypedMessage p0 ->
            Evergreen.V108.AiChat.TypedMessage p0

        Evergreen.V104.AiChat.PressedSend ->
            Evergreen.V108.AiChat.PressedSend

        Evergreen.V104.AiChat.TypedChatHistory p0 ->
            Evergreen.V108.AiChat.TypedChatHistory p0

        Evergreen.V104.AiChat.PressedKeep p0 ->
            Evergreen.V108.AiChat.PressedKeep (p0 |> migrate_AiChat_ResponseId)

        Evergreen.V104.AiChat.PressedDelete p0 ->
            Evergreen.V108.AiChat.PressedDelete (p0 |> migrate_AiChat_ResponseId)

        Evergreen.V104.AiChat.PressedRetry p0 ->
            Evergreen.V108.AiChat.PressedRetry (p0 |> migrate_AiChat_ResponseId)

        Evergreen.V104.AiChat.PressedChatHistoryContainer ->
            Evergreen.V108.AiChat.PressedChatHistoryContainer

        Evergreen.V104.AiChat.PressedClearChatHistory ->
            Evergreen.V108.AiChat.PressedClearChatHistory

        Evergreen.V104.AiChat.PressedOptionsButton ->
            Evergreen.V108.AiChat.PressedOptionsButton

        Evergreen.V104.AiChat.SelectedAiModel p0 ->
            Evergreen.V108.AiChat.SelectedAiModel p0

        Evergreen.V104.AiChat.SelectedSendMessageWith p0 ->
            Evergreen.V108.AiChat.SelectedSendMessageWith (p0 |> migrate_AiChat_SendMessageWith)

        Evergreen.V104.AiChat.TypedUserPrefix p0 ->
            Evergreen.V108.AiChat.TypedUserPrefix p0

        Evergreen.V104.AiChat.TypedBotPrefix p0 ->
            Evergreen.V108.AiChat.TypedBotPrefix p0

        Evergreen.V104.AiChat.CheckDebounce p0 ->
            Evergreen.V108.AiChat.CheckDebounce p0

        Evergreen.V104.AiChat.GotLocalStorage p0 ->
            Evergreen.V108.AiChat.GotLocalStorage p0

        Evergreen.V104.AiChat.EditedResponse p0 p1 ->
            Evergreen.V108.AiChat.EditedResponse (p0 |> migrate_AiChat_ResponseId) p1

        Evergreen.V104.AiChat.NoOp ->
            Evergreen.V108.AiChat.NoOp

        Evergreen.V104.AiChat.GotAiModels p0 ->
            Evergreen.V108.AiChat.GotAiModels p0


migrate_AiChat_PendingResponse : Evergreen.V104.AiChat.PendingResponse -> Evergreen.V108.AiChat.PendingResponse
migrate_AiChat_PendingResponse old =
    case old of
        Evergreen.V104.AiChat.Pending ->
            Evergreen.V108.AiChat.Pending

        Evergreen.V104.AiChat.GotResponse p0 ->
            Evergreen.V108.AiChat.GotResponse p0

        Evergreen.V104.AiChat.GotError p0 ->
            Evergreen.V108.AiChat.GotError p0


migrate_AiChat_ResponseId : Evergreen.V104.AiChat.ResponseId -> Evergreen.V108.AiChat.ResponseId
migrate_AiChat_ResponseId old =
    case old of
        Evergreen.V104.AiChat.RespondId p0 ->
            Evergreen.V108.AiChat.RespondId p0


migrate_AiChat_SendMessageWith : Evergreen.V104.AiChat.SendMessageWith -> Evergreen.V108.AiChat.SendMessageWith
migrate_AiChat_SendMessageWith old =
    case old of
        Evergreen.V104.AiChat.SendWithEnter ->
            Evergreen.V108.AiChat.SendWithEnter

        Evergreen.V104.AiChat.SendWithShiftEnter ->
            Evergreen.V108.AiChat.SendWithShiftEnter


migrate_ChannelName_ChannelName : Evergreen.V104.ChannelName.ChannelName -> Evergreen.V108.ChannelName.ChannelName
migrate_ChannelName_ChannelName old =
    case old of
        Evergreen.V104.ChannelName.ChannelName p0 ->
            Evergreen.V108.ChannelName.ChannelName p0


migrate_Coord_Coord : (units_old -> units_new) -> Evergreen.V104.Coord.Coord units_old -> Evergreen.V108.Coord.Coord units_new
migrate_Coord_Coord migrate_units old =
    old |> Tuple.mapBoth migrate_Quantity_Quantity migrate_Quantity_Quantity


migrate_CssPixels_CssPixels : Evergreen.V104.CssPixels.CssPixels -> Evergreen.V108.CssPixels.CssPixels
migrate_CssPixels_CssPixels old =
    case old of
        Evergreen.V104.CssPixels.CssPixels p0 ->
            Evergreen.V108.CssPixels.CssPixels p0


migrate_DmChannel_FrontendDmChannel : Evergreen.V104.DmChannel.FrontendDmChannel -> Evergreen.V108.DmChannel.FrontendDmChannel
migrate_DmChannel_FrontendDmChannel old =
    { messages = old.messages |> Array.map (migrate_Message_MessageState migrate_Id_ChannelMessageId)
    , visibleMessages = old.visibleMessages |> migrate_VisibleMessages_VisibleMessages migrate_Id_ChannelMessageId
    , lastTypedAt = old.lastTypedAt |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id (migrate_DmChannel_LastTypedAt migrate_Id_ChannelMessageId)) |> SeqDict.fromList
    , threads = old.threads |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_DmChannel_FrontendThread) |> SeqDict.fromList
    }


migrate_DmChannel_FrontendThread : Evergreen.V104.DmChannel.FrontendThread -> Evergreen.V108.DmChannel.FrontendThread
migrate_DmChannel_FrontendThread old =
    { messages = old.messages |> Array.map (migrate_Message_MessageState migrate_Id_ThreadMessageId)
    , visibleMessages = old.visibleMessages |> migrate_VisibleMessages_VisibleMessages migrate_Id_ThreadMessageId
    , lastTypedAt = old.lastTypedAt |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id (migrate_DmChannel_LastTypedAt migrate_Id_ThreadMessageId)) |> SeqDict.fromList
    }


migrate_DmChannel_LastTypedAt : (messageId_old -> messageId_new) -> Evergreen.V104.DmChannel.LastTypedAt messageId_old -> Evergreen.V108.DmChannel.LastTypedAt messageId_new
migrate_DmChannel_LastTypedAt migrate_messageId old =
    { time = old.time
    , messageIndex = old.messageIndex |> Maybe.map migrate_Id_Id
    }


migrate_Editable_Editing : Evergreen.V104.Editable.Editing -> Evergreen.V108.Editable.Editing
migrate_Editable_Editing old =
    case old of
        Evergreen.V104.Editable.NotEditing ->
            Evergreen.V108.Editable.NotEditing

        Evergreen.V104.Editable.Editing p0 ->
            Evergreen.V108.Editable.Editing p0


migrate_Editable_Model : Evergreen.V104.Editable.Model -> Evergreen.V108.Editable.Model
migrate_Editable_Model old =
    { editing = old.editing |> migrate_Editable_Editing
    , pressedSubmit = old.pressedSubmit
    , showSecret = old.showSecret
    }


migrate_Editable_Msg : (value_old -> value_new) -> Evergreen.V104.Editable.Msg value_old -> Evergreen.V108.Editable.Msg value_new
migrate_Editable_Msg migrate_value old =
    case old of
        Evergreen.V104.Editable.Edit p0 ->
            Evergreen.V108.Editable.Edit (p0 |> migrate_Editable_Model)

        Evergreen.V104.Editable.PressedAcceptEdit p0 ->
            Evergreen.V108.Editable.PressedAcceptEdit (p0 |> migrate_value)


migrate_EmailAddress_EmailAddress : Evergreen.V104.EmailAddress.EmailAddress -> Evergreen.V108.EmailAddress.EmailAddress
migrate_EmailAddress_EmailAddress old =
    case old of
        Evergreen.V104.EmailAddress.EmailAddress p0 ->
            Evergreen.V108.EmailAddress.EmailAddress p0


migrate_Emoji_Emoji : Evergreen.V104.Emoji.Emoji -> Evergreen.V108.Emoji.Emoji
migrate_Emoji_Emoji old =
    case old of
        Evergreen.V104.Emoji.UnicodeEmoji p0 ->
            Evergreen.V108.Emoji.UnicodeEmoji p0


migrate_FileName_FileName : Evergreen.V104.FileName.FileName -> Evergreen.V108.FileName.FileName
migrate_FileName_FileName old =
    case old of
        Evergreen.V104.FileName.FileName p0 ->
            Evergreen.V108.FileName.FileName p0


migrate_FileStatus_ContentType : Evergreen.V104.FileStatus.ContentType -> Evergreen.V108.FileStatus.ContentType
migrate_FileStatus_ContentType old =
    case old of
        Evergreen.V104.FileStatus.ContentType p0 ->
            Evergreen.V108.FileStatus.ContentType p0


migrate_FileStatus_FileData : Evergreen.V104.FileStatus.FileData -> Evergreen.V108.FileStatus.FileData
migrate_FileStatus_FileData old =
    { fileName = old.fileName |> migrate_FileName_FileName
    , fileSize = old.fileSize
    , imageMetadata = old.imageMetadata |> Maybe.map migrate_FileStatus_ImageMetadata
    , contentType = old.contentType |> migrate_FileStatus_ContentType
    , fileHash = old.fileHash |> migrate_FileStatus_FileHash
    }


migrate_FileStatus_FileDataWithImage : Evergreen.V104.FileStatus.FileDataWithImage -> Evergreen.V108.FileStatus.FileDataWithImage
migrate_FileStatus_FileDataWithImage old =
    { fileName = old.fileName |> migrate_FileName_FileName
    , fileSize = old.fileSize
    , imageMetadata = old.imageMetadata |> migrate_FileStatus_ImageMetadata
    , contentType = old.contentType |> migrate_FileStatus_ContentType
    , fileHash = old.fileHash |> migrate_FileStatus_FileHash
    }


migrate_FileStatus_FileHash : Evergreen.V104.FileStatus.FileHash -> Evergreen.V108.FileStatus.FileHash
migrate_FileStatus_FileHash old =
    case old of
        Evergreen.V104.FileStatus.FileHash p0 ->
            Evergreen.V108.FileStatus.FileHash p0


migrate_FileStatus_FileStatus : Evergreen.V104.FileStatus.FileStatus -> Evergreen.V108.FileStatus.FileStatus
migrate_FileStatus_FileStatus old =
    case old of
        Evergreen.V104.FileStatus.FileUploading p0 p1 p2 ->
            Evergreen.V108.FileStatus.FileUploading (p0 |> migrate_FileName_FileName)
                p1
                (p2 |> migrate_FileStatus_ContentType)

        Evergreen.V104.FileStatus.FileUploaded p0 ->
            Evergreen.V108.FileStatus.FileUploaded (p0 |> migrate_FileStatus_FileData)

        Evergreen.V104.FileStatus.FileError p0 p1 p2 p3 ->
            Evergreen.V108.FileStatus.FileError (p0 |> migrate_FileName_FileName)
                p1
                (p2 |> migrate_FileStatus_ContentType)
                p3


migrate_FileStatus_ImageMetadata : Evergreen.V104.FileStatus.ImageMetadata -> Evergreen.V108.FileStatus.ImageMetadata
migrate_FileStatus_ImageMetadata old =
    { imageSize = old.imageSize |> migrate_Coord_Coord migrate_CssPixels_CssPixels
    , orientation = old.orientation |> Maybe.map migrate_FileStatus_Orientation
    , gpsLocation = old.gpsLocation
    , cameraOwner = old.cameraOwner
    , exposureTime = old.exposureTime
    , fNumber = old.fNumber
    , focalLength = old.focalLength
    , isoSpeedRating = old.isoSpeedRating
    , make = old.make
    , model = old.model
    , software = old.software
    , userComment = old.userComment
    }


migrate_FileStatus_Orientation : Evergreen.V104.FileStatus.Orientation -> Evergreen.V108.FileStatus.Orientation
migrate_FileStatus_Orientation old =
    case old of
        Evergreen.V104.FileStatus.NoChange ->
            Evergreen.V108.FileStatus.NoChange

        Evergreen.V104.FileStatus.Rotation90 ->
            Evergreen.V108.FileStatus.Rotation90

        Evergreen.V104.FileStatus.Rotation180 ->
            Evergreen.V108.FileStatus.Rotation180

        Evergreen.V104.FileStatus.Rotation270 ->
            Evergreen.V108.FileStatus.Rotation270

        Evergreen.V104.FileStatus.Mirrored ->
            Evergreen.V108.FileStatus.Mirrored

        Evergreen.V104.FileStatus.MirroredRotation90 ->
            Evergreen.V108.FileStatus.MirroredRotation90

        Evergreen.V104.FileStatus.MirroredRotation180 ->
            Evergreen.V108.FileStatus.MirroredRotation180

        Evergreen.V104.FileStatus.MirroredRotation270 ->
            Evergreen.V108.FileStatus.MirroredRotation270


migrate_FileStatus_UploadResponse : Evergreen.V104.FileStatus.UploadResponse -> Evergreen.V108.FileStatus.UploadResponse
migrate_FileStatus_UploadResponse old =
    { fileHash = old.fileHash |> migrate_FileStatus_FileHash
    , imageSize = old.imageSize |> Maybe.map migrate_FileStatus_ImageMetadata
    }


migrate_Geometry_Types_Point2d : Evergreen.V104.Geometry.Types.Point2d units_old coordinates_old -> Evergreen.V108.Geometry.Types.Point2d units_new coordinates_new
migrate_Geometry_Types_Point2d old =
    case old of
        Evergreen.V104.Geometry.Types.Point2d p0 ->
            Evergreen.V108.Geometry.Types.Point2d p0


migrate_GuildName_GuildName : Evergreen.V104.GuildName.GuildName -> Evergreen.V108.GuildName.GuildName
migrate_GuildName_GuildName old =
    case old of
        Evergreen.V104.GuildName.GuildName p0 ->
            Evergreen.V108.GuildName.GuildName p0


migrate_Id_ChannelMessageId : Evergreen.V104.Id.ChannelMessageId -> Evergreen.V108.Id.ChannelMessageId
migrate_Id_ChannelMessageId old =
    case old of
        Evergreen.V104.Id.ChannelMessageId p0 ->
            Evergreen.V108.Id.ChannelMessageId p0


migrate_Id_GuildOrDmId : Evergreen.V104.Id.GuildOrDmId -> Evergreen.V108.Id.GuildOrDmId
migrate_Id_GuildOrDmId old =
    old |> Tuple.mapBoth migrate_Id_GuildOrDmIdNoThread migrate_Id_ThreadRoute


migrate_Id_GuildOrDmIdNoThread : Evergreen.V104.Id.GuildOrDmIdNoThread -> Evergreen.V108.Id.GuildOrDmIdNoThread
migrate_Id_GuildOrDmIdNoThread old =
    case old of
        Evergreen.V104.Id.GuildOrDmId_Guild p0 p1 ->
            Evergreen.V108.Id.GuildOrDmId_Guild (p0 |> migrate_Id_Id) (p1 |> migrate_Id_Id)

        Evergreen.V104.Id.GuildOrDmId_Dm p0 ->
            Evergreen.V108.Id.GuildOrDmId_Dm (p0 |> migrate_Id_Id)


migrate_Id_Id : Evergreen.V104.Id.Id a_old -> Evergreen.V108.Id.Id a_new
migrate_Id_Id old =
    case old of
        Evergreen.V104.Id.Id p0 ->
            Evergreen.V108.Id.Id p0


migrate_Id_ThreadMessageId : Evergreen.V104.Id.ThreadMessageId -> Evergreen.V108.Id.ThreadMessageId
migrate_Id_ThreadMessageId old =
    case old of
        Evergreen.V104.Id.ThreadMessageId p0 ->
            Evergreen.V108.Id.ThreadMessageId p0


migrate_Id_ThreadRoute : Evergreen.V104.Id.ThreadRoute -> Evergreen.V108.Id.ThreadRoute
migrate_Id_ThreadRoute old =
    case old of
        Evergreen.V104.Id.NoThread ->
            Evergreen.V108.Id.NoThread

        Evergreen.V104.Id.ViewThread p0 ->
            Evergreen.V108.Id.ViewThread (p0 |> migrate_Id_Id)


migrate_Id_ThreadRouteWithMaybeMessage : Evergreen.V104.Id.ThreadRouteWithMaybeMessage -> Evergreen.V108.Id.ThreadRouteWithMaybeMessage
migrate_Id_ThreadRouteWithMaybeMessage old =
    case old of
        Evergreen.V104.Id.NoThreadWithMaybeMessage p0 ->
            Evergreen.V108.Id.NoThreadWithMaybeMessage (p0 |> Maybe.map migrate_Id_Id)

        Evergreen.V104.Id.ViewThreadWithMaybeMessage p0 p1 ->
            Evergreen.V108.Id.ViewThreadWithMaybeMessage (p0 |> migrate_Id_Id)
                (p1 |> Maybe.map migrate_Id_Id)


migrate_Id_ThreadRouteWithMessage : Evergreen.V104.Id.ThreadRouteWithMessage -> Evergreen.V108.Id.ThreadRouteWithMessage
migrate_Id_ThreadRouteWithMessage old =
    case old of
        Evergreen.V104.Id.NoThreadWithMessage p0 ->
            Evergreen.V108.Id.NoThreadWithMessage (p0 |> migrate_Id_Id)

        Evergreen.V104.Id.ViewThreadWithMessage p0 p1 ->
            Evergreen.V108.Id.ViewThreadWithMessage (p0 |> migrate_Id_Id) (p1 |> migrate_Id_Id)


migrate_Internal_Model2_Msg : Evergreen.V104.Internal.Model2.Msg -> Evergreen.V108.Internal.Model2.Msg
migrate_Internal_Model2_Msg old =
    case old of
        Evergreen.V104.Internal.Model2.Tick p0 ->
            Evergreen.V108.Internal.Model2.Tick p0

        Evergreen.V104.Internal.Model2.Teleported p0 p1 ->
            Evergreen.V108.Internal.Model2.Teleported (p0 |> migrate_Internal_Teleport_Trigger)
                (p1 |> migrate_Internal_Teleport_Event)


migrate_Internal_Model2_State : Evergreen.V104.Internal.Model2.State -> Evergreen.V108.Internal.Model2.State
migrate_Internal_Model2_State old =
    case old of
        Evergreen.V104.Internal.Model2.State p0 ->
            Evergreen.V108.Internal.Model2.State p0


migrate_Internal_Teleport_CssAnimation : Evergreen.V104.Internal.Teleport.CssAnimation -> Evergreen.V108.Internal.Teleport.CssAnimation
migrate_Internal_Teleport_CssAnimation old =
    old


migrate_Internal_Teleport_Data : Evergreen.V104.Internal.Teleport.Data -> Evergreen.V108.Internal.Teleport.Data
migrate_Internal_Teleport_Data old =
    case old of
        Evergreen.V104.Internal.Teleport.Css p0 ->
            Evergreen.V108.Internal.Teleport.Css (p0 |> migrate_Internal_Teleport_CssAnimation)

        Evergreen.V104.Internal.Teleport.ParentTrigger p0 ->
            Evergreen.V108.Internal.Teleport.ParentTrigger (p0 |> migrate_Internal_Teleport_ParentTriggerDetails)


migrate_Internal_Teleport_Event : Evergreen.V104.Internal.Teleport.Event -> Evergreen.V108.Internal.Teleport.Event
migrate_Internal_Teleport_Event old =
    { timestamp = old.timestamp
    , data = old.data |> List.map migrate_Internal_Teleport_Data
    }


migrate_Internal_Teleport_ParentTriggerDetails : Evergreen.V104.Internal.Teleport.ParentTriggerDetails -> Evergreen.V108.Internal.Teleport.ParentTriggerDetails
migrate_Internal_Teleport_ParentTriggerDetails old =
    old


migrate_Internal_Teleport_Trigger : Evergreen.V104.Internal.Teleport.Trigger -> Evergreen.V108.Internal.Teleport.Trigger
migrate_Internal_Teleport_Trigger old =
    case old of
        Evergreen.V104.Internal.Teleport.OnHover ->
            Evergreen.V108.Internal.Teleport.OnHover

        Evergreen.V104.Internal.Teleport.OnRender ->
            Evergreen.V108.Internal.Teleport.OnRender

        Evergreen.V104.Internal.Teleport.OnFocus ->
            Evergreen.V108.Internal.Teleport.OnFocus

        Evergreen.V104.Internal.Teleport.OnFocusWithin ->
            Evergreen.V108.Internal.Teleport.OnFocusWithin

        Evergreen.V104.Internal.Teleport.OnActive ->
            Evergreen.V108.Internal.Teleport.OnActive

        Evergreen.V104.Internal.Teleport.OnDismount ->
            Evergreen.V108.Internal.Teleport.OnDismount


migrate_List_Nonempty_Nonempty : (a_old -> a_new) -> List.Nonempty.Nonempty a_old -> List.Nonempty.Nonempty a_new
migrate_List_Nonempty_Nonempty migrate_a old =
    old |> List.Nonempty.map migrate_a


migrate_LocalState_AdminData : Evergreen.V104.LocalState.AdminData -> Evergreen.V108.LocalState.AdminData
migrate_LocalState_AdminData old =
    { users = old.users |> migrate_NonemptyDict_NonemptyDict migrate_Id_Id migrate_User_BackendUser
    , emailNotificationsEnabled = old.emailNotificationsEnabled
    , twoFactorAuthentication = old.twoFactorAuthentication |> SeqDict.toList |> List.map (Tuple.mapFirst migrate_Id_Id) |> SeqDict.fromList
    , botToken = old.botToken |> Maybe.map migrate_LocalState_DiscordBotToken
    , privateVapidKey = old.privateVapidKey |> migrate_LocalState_PrivateVapidKey
    , slackClientSecret = old.slackClientSecret |> Maybe.map migrate_Slack_ClientSecret
    , openRouterKey = old.openRouterKey
    }


migrate_LocalState_AdminStatus : Evergreen.V104.LocalState.AdminStatus -> Evergreen.V108.LocalState.AdminStatus
migrate_LocalState_AdminStatus old =
    case old of
        Evergreen.V104.LocalState.IsAdmin p0 ->
            Evergreen.V108.LocalState.IsAdmin (p0 |> migrate_LocalState_AdminData)

        Evergreen.V104.LocalState.IsNotAdmin ->
            Evergreen.V108.LocalState.IsNotAdmin


migrate_LocalState_Archived : Evergreen.V104.LocalState.Archived -> Evergreen.V108.LocalState.Archived
migrate_LocalState_Archived old =
    { archivedAt = old.archivedAt
    , archivedBy = old.archivedBy |> migrate_Id_Id
    }


migrate_LocalState_DiscordBotToken : Evergreen.V104.LocalState.DiscordBotToken -> Evergreen.V108.LocalState.DiscordBotToken
migrate_LocalState_DiscordBotToken old =
    case old of
        Evergreen.V104.LocalState.DiscordBotToken p0 ->
            Evergreen.V108.LocalState.DiscordBotToken p0


migrate_LocalState_FrontendChannel : Evergreen.V104.LocalState.FrontendChannel -> Evergreen.V108.LocalState.FrontendChannel
migrate_LocalState_FrontendChannel old =
    { createdAt = old.createdAt
    , createdBy = old.createdBy |> migrate_Id_Id
    , name = old.name |> migrate_ChannelName_ChannelName
    , messages = old.messages |> Array.map (migrate_Message_MessageState migrate_Id_ChannelMessageId)
    , visibleMessages = old.visibleMessages |> migrate_VisibleMessages_VisibleMessages migrate_Id_ChannelMessageId
    , isArchived = old.isArchived |> Maybe.map migrate_LocalState_Archived
    , lastTypedAt = old.lastTypedAt |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id (migrate_DmChannel_LastTypedAt migrate_Id_ChannelMessageId)) |> SeqDict.fromList
    , threads = old.threads |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_DmChannel_FrontendThread) |> SeqDict.fromList
    }


migrate_LocalState_FrontendGuild : Evergreen.V104.LocalState.FrontendGuild -> Evergreen.V108.LocalState.FrontendGuild
migrate_LocalState_FrontendGuild old =
    { createdAt = old.createdAt
    , createdBy = old.createdBy |> migrate_Id_Id
    , name = old.name |> migrate_GuildName_GuildName
    , icon = old.icon |> Maybe.map migrate_FileStatus_FileHash
    , channels = old.channels |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_LocalState_FrontendChannel) |> SeqDict.fromList
    , members = old.members |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id (\rec -> rec)) |> SeqDict.fromList
    , owner = old.owner |> migrate_Id_Id
    , invites =
        old.invites
            |> SeqDict.toList
            |> List.map
                (Tuple.mapBoth migrate_SecretId_SecretId
                    (\rec ->
                        { createdAt = rec.createdAt
                        , createdBy = rec.createdBy |> migrate_Id_Id
                        }
                    )
                )
            |> SeqDict.fromList
    }


migrate_LocalState_JoinGuildError : Evergreen.V104.LocalState.JoinGuildError -> Evergreen.V108.LocalState.JoinGuildError
migrate_LocalState_JoinGuildError old =
    case old of
        Evergreen.V104.LocalState.AlreadyJoined ->
            Evergreen.V108.LocalState.AlreadyJoined

        Evergreen.V104.LocalState.InviteIsInvalid ->
            Evergreen.V108.LocalState.InviteIsInvalid


migrate_LocalState_LocalState : Evergreen.V104.LocalState.LocalState -> Evergreen.V108.LocalState.LocalState
migrate_LocalState_LocalState old =
    { adminData = old.adminData |> migrate_LocalState_AdminStatus
    , guilds = old.guilds |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_LocalState_FrontendGuild) |> SeqDict.fromList
    , dmChannels = old.dmChannels |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_DmChannel_FrontendDmChannel) |> SeqDict.fromList
    , joinGuildError = old.joinGuildError |> Maybe.map migrate_LocalState_JoinGuildError
    , localUser = old.localUser |> migrate_LocalState_LocalUser
    , otherSessions = old.otherSessions |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_SessionIdHash_SessionIdHash migrate_UserSession_FrontendUserSession) |> SeqDict.fromList
    , publicVapidKey = old.publicVapidKey
    }


migrate_LocalState_LocalUser : Evergreen.V104.LocalState.LocalUser -> Evergreen.V108.LocalState.LocalUser
migrate_LocalState_LocalUser old =
    { session = old.session |> migrate_UserSession_UserSession
    , user = old.user |> migrate_User_BackendUser
    , otherUsers = old.otherUsers |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_User_FrontendUser) |> SeqDict.fromList
    , timezone = old.timezone
    , userAgent = old.userAgent |> migrate_UserAgent_UserAgent
    }


migrate_LocalState_LogWithTime : Evergreen.V104.LocalState.LogWithTime -> Evergreen.V108.LocalState.LogWithTime
migrate_LocalState_LogWithTime old =
    { time = old.time
    , log = old.log |> migrate_Log_Log
    }


migrate_LocalState_PrivateVapidKey : Evergreen.V104.LocalState.PrivateVapidKey -> Evergreen.V108.LocalState.PrivateVapidKey
migrate_LocalState_PrivateVapidKey old =
    case old of
        Evergreen.V104.LocalState.PrivateVapidKey p0 ->
            Evergreen.V108.LocalState.PrivateVapidKey p0


migrate_Local_ChangeId : Evergreen.V104.Local.ChangeId -> Evergreen.V108.Local.ChangeId
migrate_Local_ChangeId old =
    case old of
        Evergreen.V104.Local.ChangeId p0 ->
            Evergreen.V108.Local.ChangeId p0


migrate_Local_Local : (msg_old -> msg_new) -> (model_old -> model_new) -> Evergreen.V104.Local.Local msg_old model_old -> Evergreen.V108.Local.Local msg_new model_new
migrate_Local_Local migrate_msg migrate_model old =
    case old of
        Evergreen.V104.Local.Local p0 ->
            Evergreen.V108.Local.Local
                { localMsgs =
                    p0.localMsgs
                        |> Dict.map
                            (\k ->
                                \rec1 ->
                                    { createdAt = rec1.createdAt
                                    , msg = rec1.msg |> migrate_msg
                                    }
                            )
                , localModel = p0.localModel |> migrate_model
                , serverModel = p0.serverModel |> migrate_model
                , counter = p0.counter |> migrate_Local_ChangeId
                }


migrate_Log_Log : Evergreen.V104.Log.Log -> Evergreen.V108.Log.Log
migrate_Log_Log old =
    case old of
        Evergreen.V104.Log.LoginEmail p0 p1 ->
            Evergreen.V108.Log.LoginEmail (p0 |> Result.mapError migrate_Postmark_SendEmailError)
                (p1 |> migrate_EmailAddress_EmailAddress)

        Evergreen.V104.Log.LoginsRateLimited p0 ->
            Evergreen.V108.Log.LoginsRateLimited (p0 |> migrate_Id_Id)

        Evergreen.V104.Log.ChangedUsers p0 ->
            Evergreen.V108.Log.ChangedUsers (p0 |> migrate_Id_Id)

        Evergreen.V104.Log.SendLogErrorEmailFailed p0 p1 ->
            Evergreen.V108.Log.SendLogErrorEmailFailed (p0 |> migrate_Postmark_SendEmailError)
                (p1 |> migrate_EmailAddress_EmailAddress)

        Evergreen.V104.Log.PushNotificationError p0 p1 ->
            Evergreen.V108.Log.PushNotificationError (p0 |> migrate_Id_Id) p1


migrate_LoginForm_CodeStatus : Evergreen.V104.LoginForm.CodeStatus -> Evergreen.V108.LoginForm.CodeStatus
migrate_LoginForm_CodeStatus old =
    case old of
        Evergreen.V104.LoginForm.Checking ->
            Evergreen.V108.LoginForm.Checking

        Evergreen.V104.LoginForm.NotValid ->
            Evergreen.V108.LoginForm.NotValid


migrate_LoginForm_EnterEmail2 : Evergreen.V104.LoginForm.EnterEmail2 -> Evergreen.V108.LoginForm.EnterEmail2
migrate_LoginForm_EnterEmail2 old =
    old


migrate_LoginForm_EnterLoginCode2 : Evergreen.V104.LoginForm.EnterLoginCode2 -> Evergreen.V108.LoginForm.EnterLoginCode2
migrate_LoginForm_EnterLoginCode2 old =
    { sentTo = old.sentTo |> migrate_EmailAddress_EmailAddress
    , code = old.code
    , attempts = old.attempts |> SeqDict.map (\k -> migrate_LoginForm_CodeStatus)
    }


migrate_LoginForm_EnterTwoFactorCode2 : Evergreen.V104.LoginForm.EnterTwoFactorCode2 -> Evergreen.V108.LoginForm.EnterTwoFactorCode2
migrate_LoginForm_EnterTwoFactorCode2 old =
    { code = old.code
    , attempts = old.attempts |> SeqDict.map (\k -> migrate_LoginForm_CodeStatus)
    , attemptCount = old.attemptCount
    }


migrate_LoginForm_EnterUserData2 : Evergreen.V104.LoginForm.EnterUserData2 -> Evergreen.V108.LoginForm.EnterUserData2
migrate_LoginForm_EnterUserData2 old =
    { name = old.name
    , pressedSubmit = old.pressedSubmit |> migrate_LoginForm_SubmitStatus
    }


migrate_LoginForm_LoginForm : Evergreen.V104.LoginForm.LoginForm -> Evergreen.V108.LoginForm.LoginForm
migrate_LoginForm_LoginForm old =
    case old of
        Evergreen.V104.LoginForm.EnterEmail p0 ->
            Evergreen.V108.LoginForm.EnterEmail (p0 |> migrate_LoginForm_EnterEmail2)

        Evergreen.V104.LoginForm.EnterLoginCode p0 ->
            Evergreen.V108.LoginForm.EnterLoginCode (p0 |> migrate_LoginForm_EnterLoginCode2)

        Evergreen.V104.LoginForm.EnterTwoFactorCode p0 ->
            Evergreen.V108.LoginForm.EnterTwoFactorCode (p0 |> migrate_LoginForm_EnterTwoFactorCode2)

        Evergreen.V104.LoginForm.EnterUserData p0 ->
            Evergreen.V108.LoginForm.EnterUserData (p0 |> migrate_LoginForm_EnterUserData2)


migrate_LoginForm_Msg : Evergreen.V104.LoginForm.Msg -> Evergreen.V108.LoginForm.Msg
migrate_LoginForm_Msg old =
    case old of
        Evergreen.V104.LoginForm.PressedSubmitEmail ->
            Evergreen.V108.LoginForm.PressedSubmitEmail

        Evergreen.V104.LoginForm.PressedCancelLogin ->
            Evergreen.V108.LoginForm.PressedCancelLogin

        Evergreen.V104.LoginForm.TypedLoginFormEmail p0 ->
            Evergreen.V108.LoginForm.TypedLoginFormEmail p0

        Evergreen.V104.LoginForm.TypedLoginCode p0 ->
            Evergreen.V108.LoginForm.TypedLoginCode p0

        Evergreen.V104.LoginForm.TypedTwoFactorCode p0 ->
            Evergreen.V108.LoginForm.TypedTwoFactorCode p0

        Evergreen.V104.LoginForm.TypedName p0 ->
            Evergreen.V108.LoginForm.TypedName p0

        Evergreen.V104.LoginForm.PressedSubmitUserData ->
            Evergreen.V108.LoginForm.PressedSubmitUserData


migrate_LoginForm_SubmitStatus : Evergreen.V104.LoginForm.SubmitStatus -> Evergreen.V108.LoginForm.SubmitStatus
migrate_LoginForm_SubmitStatus old =
    case old of
        Evergreen.V104.LoginForm.NotSubmitted p0 ->
            Evergreen.V108.LoginForm.NotSubmitted p0

        Evergreen.V104.LoginForm.Submitting ->
            Evergreen.V108.LoginForm.Submitting


migrate_MessageInput_MentionUserDropdown : Evergreen.V104.MessageInput.MentionUserDropdown -> Evergreen.V108.MessageInput.MentionUserDropdown
migrate_MessageInput_MentionUserDropdown old =
    { charIndex = old.charIndex
    , dropdownIndex = old.dropdownIndex
    , inputElement =
        old.inputElement
            |> (\rec -> rec)
    , target = old.target |> migrate_MessageInput_MentionUserTarget
    }


migrate_MessageInput_MentionUserTarget : Evergreen.V104.MessageInput.MentionUserTarget -> Evergreen.V108.MessageInput.MentionUserTarget
migrate_MessageInput_MentionUserTarget old =
    case old of
        Evergreen.V104.MessageInput.NewMessage ->
            Evergreen.V108.MessageInput.NewMessage

        Evergreen.V104.MessageInput.EditMessage ->
            Evergreen.V108.MessageInput.EditMessage


migrate_MessageView_MessageViewMsg : Evergreen.V104.MessageView.MessageViewMsg -> Evergreen.V108.MessageView.MessageViewMsg
migrate_MessageView_MessageViewMsg old =
    case old of
        Evergreen.V104.MessageView.MessageView_PressedSpoiler p0 ->
            Evergreen.V108.MessageView.MessageView_PressedSpoiler p0

        Evergreen.V104.MessageView.MessageView_MouseEnteredMessage ->
            Evergreen.V108.MessageView.MessageView_MouseEnteredMessage

        Evergreen.V104.MessageView.MessageView_MouseExitedMessage ->
            Evergreen.V108.MessageView.MessageView_MouseExitedMessage

        Evergreen.V104.MessageView.MessageView_TouchStart p0 p1 p2 ->
            Evergreen.V108.MessageView.MessageView_TouchStart p0
                p1
                (p2 |> migrate_NonemptyDict_NonemptyDict identity migrate_Touch_Touch)

        Evergreen.V104.MessageView.MessageView_AltPressedMessage p0 p1 ->
            Evergreen.V108.MessageView.MessageView_AltPressedMessage p0
                (p1 |> migrate_Coord_Coord migrate_CssPixels_CssPixels)

        Evergreen.V104.MessageView.MessageView_PressedReactionEmoji_Remove p0 ->
            Evergreen.V108.MessageView.MessageView_PressedReactionEmoji_Remove (p0 |> migrate_Emoji_Emoji)

        Evergreen.V104.MessageView.MessageView_PressedReactionEmoji_Add p0 ->
            Evergreen.V108.MessageView.MessageView_PressedReactionEmoji_Add (p0 |> migrate_Emoji_Emoji)

        Evergreen.V104.MessageView.MessageView_PressedReplyLink ->
            Evergreen.V108.MessageView.MessageView_PressedReplyLink

        Evergreen.V104.MessageView.MessageViewMsg_PressedShowReactionEmojiSelector ->
            Evergreen.V108.MessageView.MessageViewMsg_PressedShowReactionEmojiSelector

        Evergreen.V104.MessageView.MessageViewMsg_PressedEditMessage ->
            Evergreen.V108.MessageView.MessageViewMsg_PressedEditMessage

        Evergreen.V104.MessageView.MessageViewMsg_PressedReply ->
            Evergreen.V108.MessageView.MessageViewMsg_PressedReply

        Evergreen.V104.MessageView.MessageViewMsg_PressedShowFullMenu p0 p1 ->
            Evergreen.V108.MessageView.MessageViewMsg_PressedShowFullMenu p0
                (p1 |> migrate_Coord_Coord migrate_CssPixels_CssPixels)

        Evergreen.V104.MessageView.MessageView_PressedViewThreadLink ->
            Evergreen.V108.MessageView.MessageView_PressedViewThreadLink


migrate_Message_Message : (messageId_old -> messageId_new) -> Evergreen.V104.Message.Message messageId_old -> Evergreen.V108.Message.Message messageId_new
migrate_Message_Message migrate_messageId old =
    case old of
        Evergreen.V104.Message.UserTextMessage p0 ->
            Evergreen.V108.Message.UserTextMessage (p0 |> migrate_Message_UserTextMessageData migrate_messageId)

        Evergreen.V104.Message.UserJoinedMessage p0 p1 p2 ->
            Evergreen.V108.Message.UserJoinedMessage p0
                (p1 |> migrate_Id_Id)
                (p2 |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Emoji_Emoji (migrate_NonemptySet_NonemptySet migrate_Id_Id)) |> SeqDict.fromList)

        Evergreen.V104.Message.DeletedMessage p0 ->
            Evergreen.V108.Message.DeletedMessage p0


migrate_Message_MessageState : (messageId_old -> messageId_new) -> Evergreen.V104.Message.MessageState messageId_old -> Evergreen.V108.Message.MessageState messageId_new
migrate_Message_MessageState migrate_messageId old =
    case old of
        Evergreen.V104.Message.MessageLoaded p0 ->
            Evergreen.V108.Message.MessageLoaded (p0 |> migrate_Message_Message migrate_messageId)

        Evergreen.V104.Message.MessageUnloaded ->
            Evergreen.V108.Message.MessageUnloaded


migrate_Message_UserTextMessageData : (messageId_old -> messageId_new) -> Evergreen.V104.Message.UserTextMessageData messageId_old -> Evergreen.V108.Message.UserTextMessageData messageId_new
migrate_Message_UserTextMessageData migrate_messageId old =
    { createdAt = old.createdAt
    , createdBy = old.createdBy |> migrate_Id_Id
    , content = old.content |> migrate_List_Nonempty_Nonempty migrate_RichText_RichText
    , reactions = old.reactions |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Emoji_Emoji (migrate_NonemptySet_NonemptySet migrate_Id_Id)) |> SeqDict.fromList
    , editedAt = old.editedAt
    , repliedTo = old.repliedTo |> Maybe.map migrate_Id_Id
    , attachedFiles = old.attachedFiles |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_FileStatus_FileData) |> SeqDict.fromList
    }


migrate_NonemptyDict_NonemptyDict : (id_old -> id_new) -> (a_old -> a_new) -> Evergreen.V104.NonemptyDict.NonemptyDict id_old a_old -> Evergreen.V108.NonemptyDict.NonemptyDict id_new a_new
migrate_NonemptyDict_NonemptyDict migrate_id migrate_a old =
    case old of
        Evergreen.V104.NonemptyDict.NonemptyDict p0 p1 p2 ->
            Evergreen.V108.NonemptyDict.NonemptyDict (p0 |> migrate_id)
                (p1 |> migrate_a)
                (p2 |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_id migrate_a) |> SeqDict.fromList)


migrate_NonemptySet_NonemptySet : (a_old -> a_new) -> Evergreen.V104.NonemptySet.NonemptySet a_old -> Evergreen.V108.NonemptySet.NonemptySet a_new
migrate_NonemptySet_NonemptySet migrate_a old =
    case old of
        Evergreen.V104.NonemptySet.NonemptySet p0 p1 ->
            Evergreen.V108.NonemptySet.NonemptySet (p0 |> migrate_a) (p1 |> SeqSet.map migrate_a)


migrate_OneOrGreater_OneOrGreater : Evergreen.V104.OneOrGreater.OneOrGreater -> Evergreen.V108.OneOrGreater.OneOrGreater
migrate_OneOrGreater_OneOrGreater old =
    case old of
        Evergreen.V104.OneOrGreater.OneOrGreater p0 ->
            Evergreen.V108.OneOrGreater.OneOrGreater p0


migrate_Pages_Admin_AdminChange : Evergreen.V104.Pages.Admin.AdminChange -> Evergreen.V108.Pages.Admin.AdminChange
migrate_Pages_Admin_AdminChange old =
    case old of
        Evergreen.V104.Pages.Admin.ChangeUsers p0 ->
            Evergreen.V108.Pages.Admin.ChangeUsers
                { time = p0.time
                , changedUsers = p0.changedUsers |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_Pages_Admin_EditedBackendUser) |> SeqDict.fromList
                , newUsers = p0.newUsers
                , deletedUsers = p0.deletedUsers |> SeqSet.map migrate_Id_Id
                }

        Evergreen.V104.Pages.Admin.ExpandSection p0 ->
            Evergreen.V108.Pages.Admin.ExpandSection (p0 |> migrate_User_AdminUiSection)

        Evergreen.V104.Pages.Admin.CollapseSection p0 ->
            Evergreen.V108.Pages.Admin.CollapseSection (p0 |> migrate_User_AdminUiSection)

        Evergreen.V104.Pages.Admin.LogPageChanged p0 ->
            Evergreen.V108.Pages.Admin.LogPageChanged p0

        Evergreen.V104.Pages.Admin.SetEmailNotificationsEnabled p0 ->
            Evergreen.V108.Pages.Admin.SetEmailNotificationsEnabled p0

        Evergreen.V104.Pages.Admin.SetDiscordBotToken p0 ->
            Evergreen.V108.Pages.Admin.SetDiscordBotToken (p0 |> Maybe.map migrate_LocalState_DiscordBotToken)

        Evergreen.V104.Pages.Admin.SetPrivateVapidKey p0 ->
            Evergreen.V108.Pages.Admin.SetPrivateVapidKey (p0 |> migrate_LocalState_PrivateVapidKey)

        Evergreen.V104.Pages.Admin.SetPublicVapidKey p0 ->
            Evergreen.V108.Pages.Admin.SetPublicVapidKey p0

        Evergreen.V104.Pages.Admin.SetSlackClientSecret p0 ->
            Evergreen.V108.Pages.Admin.SetSlackClientSecret (p0 |> Maybe.map migrate_Slack_ClientSecret)

        Evergreen.V104.Pages.Admin.SetOpenRouterKey p0 ->
            Evergreen.V108.Pages.Admin.SetOpenRouterKey p0


migrate_Pages_Admin_EditedBackendUser : Evergreen.V104.Pages.Admin.EditedBackendUser -> Evergreen.V108.Pages.Admin.EditedBackendUser
migrate_Pages_Admin_EditedBackendUser old =
    old


migrate_Pages_Admin_EditingCell : Evergreen.V104.Pages.Admin.EditingCell -> Evergreen.V108.Pages.Admin.EditingCell
migrate_Pages_Admin_EditingCell old =
    { userId = old.userId |> migrate_Pages_Admin_UserTableId
    , column = old.column |> migrate_Pages_Admin_UserColumn
    , text = old.text
    }


migrate_Pages_Admin_InitAdminData : Evergreen.V104.Pages.Admin.InitAdminData -> Evergreen.V108.Pages.Admin.InitAdminData
migrate_Pages_Admin_InitAdminData old =
    { lastLogPageViewed = old.lastLogPageViewed
    , users = old.users |> migrate_NonemptyDict_NonemptyDict migrate_Id_Id migrate_User_BackendUser
    , emailNotificationsEnabled = old.emailNotificationsEnabled
    , twoFactorAuthentication = old.twoFactorAuthentication |> SeqDict.toList |> List.map (Tuple.mapFirst migrate_Id_Id) |> SeqDict.fromList
    , botToken = old.botToken |> Maybe.map migrate_LocalState_DiscordBotToken
    , privateVapidKey = old.privateVapidKey |> migrate_LocalState_PrivateVapidKey
    , slackClientSecret = old.slackClientSecret |> Maybe.map migrate_Slack_ClientSecret
    , openRouterKey = old.openRouterKey
    }


migrate_Pages_Admin_Model : Evergreen.V104.Pages.Admin.Model -> Evergreen.V108.Pages.Admin.Model
migrate_Pages_Admin_Model old =
    { highlightLog = old.highlightLog
    , copiedLogLink = old.copiedLogLink
    , userTable = old.userTable |> migrate_Pages_Admin_UserTable
    , submitError = old.submitError |> Maybe.map migrate_Pages_Admin_UsersChangeError
    , logs = old.logs |> migrate_Pagination_Pagination migrate_LocalState_LogWithTime
    }


migrate_Pages_Admin_Msg : Evergreen.V104.Pages.Admin.Msg -> Evergreen.V108.Pages.Admin.Msg
migrate_Pages_Admin_Msg old =
    case old of
        Evergreen.V104.Pages.Admin.PressedLogPage p0 ->
            Evergreen.V108.Pages.Admin.PressedLogPage p0

        Evergreen.V104.Pages.Admin.PressedCopyLogLink p0 ->
            Evergreen.V108.Pages.Admin.PressedCopyLogLink p0

        Evergreen.V104.Pages.Admin.PressedCollapseSection p0 ->
            Evergreen.V108.Pages.Admin.PressedCollapseSection (p0 |> migrate_User_AdminUiSection)

        Evergreen.V104.Pages.Admin.DoublePressedCollapseSection p0 ->
            Evergreen.V108.Pages.Admin.DoublePressedCollapseSection (p0 |> migrate_User_AdminUiSection)

        Evergreen.V104.Pages.Admin.PressedExpandSection p0 ->
            Evergreen.V108.Pages.Admin.PressedExpandSection (p0 |> migrate_User_AdminUiSection)

        Evergreen.V104.Pages.Admin.PressedEditCell p0 p1 ->
            Evergreen.V108.Pages.Admin.PressedEditCell (p0 |> migrate_Pages_Admin_UserTableId)
                (p1 |> migrate_Pages_Admin_UserColumn)

        Evergreen.V104.Pages.Admin.TypedEditCell p0 ->
            Evergreen.V108.Pages.Admin.TypedEditCell p0

        Evergreen.V104.Pages.Admin.EditCellLostFocus p0 p1 ->
            Evergreen.V108.Pages.Admin.EditCellLostFocus (p0 |> migrate_Pages_Admin_UserTableId)
                (p1 |> migrate_Pages_Admin_UserColumn)

        Evergreen.V104.Pages.Admin.FocusedOnEditCell ->
            Evergreen.V108.Pages.Admin.FocusedOnEditCell

        Evergreen.V104.Pages.Admin.EnterKeyInEditCell p0 p1 ->
            Evergreen.V108.Pages.Admin.EnterKeyInEditCell (p0 |> migrate_Pages_Admin_UserTableId)
                (p1 |> migrate_Pages_Admin_UserColumn)

        Evergreen.V104.Pages.Admin.PressedSaveUserChanges ->
            Evergreen.V108.Pages.Admin.PressedSaveUserChanges

        Evergreen.V104.Pages.Admin.TabKeyInEditCell p0 ->
            Evergreen.V108.Pages.Admin.TabKeyInEditCell p0

        Evergreen.V104.Pages.Admin.PressedResetUserChanges ->
            Evergreen.V108.Pages.Admin.PressedResetUserChanges

        Evergreen.V104.Pages.Admin.EscapeKeyInEditCell ->
            Evergreen.V108.Pages.Admin.EscapeKeyInEditCell

        Evergreen.V104.Pages.Admin.PressedAddUserRow ->
            Evergreen.V108.Pages.Admin.PressedAddUserRow

        Evergreen.V104.Pages.Admin.PressedDeleteUser p0 ->
            Evergreen.V108.Pages.Admin.PressedDeleteUser (p0 |> migrate_Pages_Admin_UserTableId)

        Evergreen.V104.Pages.Admin.PressedResetUser p0 ->
            Evergreen.V108.Pages.Admin.PressedResetUser (p0 |> migrate_Id_Id)

        Evergreen.V104.Pages.Admin.ScrolledToSection ->
            Evergreen.V108.Pages.Admin.ScrolledToSection

        Evergreen.V104.Pages.Admin.UserTableMsg p0 ->
            Evergreen.V108.Pages.Admin.UserTableMsg (p0 |> migrate_Table_Msg)

        Evergreen.V104.Pages.Admin.ToggledEmailNotifications p0 ->
            Evergreen.V108.Pages.Admin.ToggledEmailNotifications p0

        Evergreen.V104.Pages.Admin.ToggleIsAdmin p0 p1 ->
            Evergreen.V108.Pages.Admin.ToggleIsAdmin (p0 |> migrate_Pages_Admin_UserTableId) p1


migrate_Pages_Admin_UserColumn : Evergreen.V104.Pages.Admin.UserColumn -> Evergreen.V108.Pages.Admin.UserColumn
migrate_Pages_Admin_UserColumn old =
    case old of
        Evergreen.V104.Pages.Admin.NameColumn ->
            Evergreen.V108.Pages.Admin.NameColumn

        Evergreen.V104.Pages.Admin.EmailAddressColumn ->
            Evergreen.V108.Pages.Admin.EmailAddressColumn


migrate_Pages_Admin_UserTable : Evergreen.V104.Pages.Admin.UserTable -> Evergreen.V108.Pages.Admin.UserTable
migrate_Pages_Admin_UserTable old =
    { table = old.table |> migrate_Table_Model
    , changedUsers = old.changedUsers |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_Pages_Admin_EditedBackendUser) |> SeqDict.fromList
    , editingCell = old.editingCell |> Maybe.map migrate_Pages_Admin_EditingCell
    , newUsers = old.newUsers
    , deletedUsers = old.deletedUsers |> SeqSet.map migrate_Id_Id
    }


migrate_Pages_Admin_UserTableId : Evergreen.V104.Pages.Admin.UserTableId -> Evergreen.V108.Pages.Admin.UserTableId
migrate_Pages_Admin_UserTableId old =
    case old of
        Evergreen.V104.Pages.Admin.ExistingUserId p0 ->
            Evergreen.V108.Pages.Admin.ExistingUserId (p0 |> migrate_Id_Id)

        Evergreen.V104.Pages.Admin.NewUserId p0 ->
            Evergreen.V108.Pages.Admin.NewUserId p0


migrate_Pages_Admin_UsersChangeError : Evergreen.V104.Pages.Admin.UsersChangeError -> Evergreen.V108.Pages.Admin.UsersChangeError
migrate_Pages_Admin_UsersChangeError old =
    case old of
        Evergreen.V104.Pages.Admin.EmailAddressesAreNotUnique ->
            Evergreen.V108.Pages.Admin.EmailAddressesAreNotUnique

        Evergreen.V104.Pages.Admin.InvalidChangesToUser ->
            Evergreen.V108.Pages.Admin.InvalidChangesToUser

        Evergreen.V104.Pages.Admin.ChangesAppliedToNonExistentUser p0 ->
            Evergreen.V108.Pages.Admin.ChangesAppliedToNonExistentUser (p0 |> migrate_Id_Id)

        Evergreen.V104.Pages.Admin.CantRemoveAdminRoleFromYourself ->
            Evergreen.V108.Pages.Admin.CantRemoveAdminRoleFromYourself

        Evergreen.V104.Pages.Admin.CantDeleteYourself ->
            Evergreen.V108.Pages.Admin.CantDeleteYourself

        Evergreen.V104.Pages.Admin.InvalidNewUser ->
            Evergreen.V108.Pages.Admin.InvalidNewUser


migrate_Pagination_PageStatus : (a_old -> a_new) -> Evergreen.V104.Pagination.PageStatus a_old -> Evergreen.V108.Pagination.PageStatus a_new
migrate_Pagination_PageStatus migrate_a old =
    case old of
        Evergreen.V104.Pagination.PageLoading ->
            Evergreen.V108.Pagination.PageLoading

        Evergreen.V104.Pagination.PageLoaded p0 ->
            Evergreen.V108.Pagination.PageLoaded (p0 |> Array.map migrate_a)


migrate_Pagination_Pagination : (a_old -> a_new) -> Evergreen.V104.Pagination.Pagination a_old -> Evergreen.V108.Pagination.Pagination a_new
migrate_Pagination_Pagination migrate_a old =
    { pages = old.pages |> Dict.map (\k -> migrate_Pagination_PageStatus migrate_a)
    , currentPage = old.currentPage
    , totalPages = old.totalPages
    }


migrate_PersonName_PersonName : Evergreen.V104.PersonName.PersonName -> Evergreen.V108.PersonName.PersonName
migrate_PersonName_PersonName old =
    case old of
        Evergreen.V104.PersonName.PersonName p0 ->
            Evergreen.V108.PersonName.PersonName p0


migrate_Point2d_Point2d : (units_old -> units_new) -> (coordinates_old -> coordinates_new) -> Evergreen.V104.Point2d.Point2d units_old coordinates_old -> Evergreen.V108.Point2d.Point2d units_new coordinates_new
migrate_Point2d_Point2d migrate_units migrate_coordinates old =
    old |> migrate_Geometry_Types_Point2d


migrate_Ports_NotificationPermission : Evergreen.V104.Ports.NotificationPermission -> Evergreen.V108.Ports.NotificationPermission
migrate_Ports_NotificationPermission old =
    case old of
        Evergreen.V104.Ports.NotAsked ->
            Evergreen.V108.Ports.NotAsked

        Evergreen.V104.Ports.Denied ->
            Evergreen.V108.Ports.Denied

        Evergreen.V104.Ports.Granted ->
            Evergreen.V108.Ports.Granted

        Evergreen.V104.Ports.Unsupported ->
            Evergreen.V108.Ports.Unsupported


migrate_Ports_PwaStatus : Evergreen.V104.Ports.PwaStatus -> Evergreen.V108.Ports.PwaStatus
migrate_Ports_PwaStatus old =
    case old of
        Evergreen.V104.Ports.InstalledPwa ->
            Evergreen.V108.Ports.InstalledPwa

        Evergreen.V104.Ports.BrowserView ->
            Evergreen.V108.Ports.BrowserView


migrate_Postmark_PostmarkSendResponse : Evergreen.V104.Postmark.PostmarkSendResponse -> Evergreen.V108.Postmark.PostmarkSendResponse
migrate_Postmark_PostmarkSendResponse old =
    { errorCode = old.errorCode
    , message = old.message
    , to = old.to |> List.map migrate_EmailAddress_EmailAddress
    }


migrate_Postmark_SendEmailError : Evergreen.V104.Postmark.SendEmailError -> Evergreen.V108.Postmark.SendEmailError
migrate_Postmark_SendEmailError old =
    case old of
        Evergreen.V104.Postmark.UnknownError p0 ->
            Evergreen.V108.Postmark.UnknownError p0

        Evergreen.V104.Postmark.PostmarkError p0 ->
            Evergreen.V108.Postmark.PostmarkError (p0 |> migrate_Postmark_PostmarkSendResponse)

        Evergreen.V104.Postmark.NetworkError ->
            Evergreen.V108.Postmark.NetworkError

        Evergreen.V104.Postmark.Timeout ->
            Evergreen.V108.Postmark.Timeout

        Evergreen.V104.Postmark.BadUrl p0 ->
            Evergreen.V108.Postmark.BadUrl p0


migrate_Quantity_Quantity : Quantity.Quantity number units -> Quantity.Quantity number units2
migrate_Quantity_Quantity old =
    Quantity.unwrap old |> Quantity.unsafe


migrate_RichText_Language : Evergreen.V104.RichText.Language -> Evergreen.V108.RichText.Language
migrate_RichText_Language old =
    case old of
        Evergreen.V104.RichText.Language p0 ->
            Evergreen.V108.RichText.Language p0

        Evergreen.V104.RichText.NoLanguage ->
            Evergreen.V108.RichText.NoLanguage


migrate_RichText_RichText : Evergreen.V104.RichText.RichText -> Evergreen.V108.RichText.RichText
migrate_RichText_RichText old =
    case old of
        Evergreen.V104.RichText.UserMention p0 ->
            Evergreen.V108.RichText.UserMention (p0 |> migrate_Id_Id)

        Evergreen.V104.RichText.NormalText p0 p1 ->
            Evergreen.V108.RichText.NormalText p0 p1

        Evergreen.V104.RichText.Bold p0 ->
            Evergreen.V108.RichText.Bold (p0 |> migrate_List_Nonempty_Nonempty migrate_RichText_RichText)

        Evergreen.V104.RichText.Italic p0 ->
            Evergreen.V108.RichText.Italic (p0 |> migrate_List_Nonempty_Nonempty migrate_RichText_RichText)

        Evergreen.V104.RichText.Underline p0 ->
            Evergreen.V108.RichText.Underline (p0 |> migrate_List_Nonempty_Nonempty migrate_RichText_RichText)

        Evergreen.V104.RichText.Strikethrough p0 ->
            Evergreen.V108.RichText.Strikethrough (p0 |> migrate_List_Nonempty_Nonempty migrate_RichText_RichText)

        Evergreen.V104.RichText.Spoiler p0 ->
            Evergreen.V108.RichText.Spoiler (p0 |> migrate_List_Nonempty_Nonempty migrate_RichText_RichText)

        Evergreen.V104.RichText.Hyperlink p0 p1 ->
            Evergreen.V108.RichText.Hyperlink p0 p1

        Evergreen.V104.RichText.InlineCode p0 p1 ->
            Evergreen.V108.RichText.InlineCode p0 p1

        Evergreen.V104.RichText.CodeBlock p0 p1 ->
            Evergreen.V108.RichText.CodeBlock (p0 |> migrate_RichText_Language) p1

        Evergreen.V104.RichText.AttachedFile p0 ->
            Evergreen.V108.RichText.AttachedFile (p0 |> migrate_Id_Id)


migrate_Route_ChannelRoute : Evergreen.V104.Route.ChannelRoute -> Evergreen.V108.Route.ChannelRoute
migrate_Route_ChannelRoute old =
    case old of
        Evergreen.V104.Route.ChannelRoute p0 p1 ->
            Evergreen.V108.Route.ChannelRoute (p0 |> migrate_Id_Id)
                (p1 |> migrate_Route_ThreadRouteWithFriends)

        Evergreen.V104.Route.NewChannelRoute ->
            Evergreen.V108.Route.NewChannelRoute

        Evergreen.V104.Route.EditChannelRoute p0 ->
            Evergreen.V108.Route.EditChannelRoute (p0 |> migrate_Id_Id)

        Evergreen.V104.Route.InviteLinkCreatorRoute ->
            Evergreen.V108.Route.InviteLinkCreatorRoute

        Evergreen.V104.Route.JoinRoute p0 ->
            Evergreen.V108.Route.JoinRoute (p0 |> migrate_SecretId_SecretId)


migrate_Route_Route : Evergreen.V104.Route.Route -> Evergreen.V108.Route.Route
migrate_Route_Route old =
    case old of
        Evergreen.V104.Route.HomePageRoute ->
            Evergreen.V108.Route.HomePageRoute

        Evergreen.V104.Route.AdminRoute p0 ->
            Evergreen.V108.Route.AdminRoute p0

        Evergreen.V104.Route.GuildRoute p0 p1 ->
            Evergreen.V108.Route.GuildRoute (p0 |> migrate_Id_Id)
                (p1 |> migrate_Route_ChannelRoute)

        Evergreen.V104.Route.DmRoute p0 p1 ->
            Evergreen.V108.Route.DmRoute (p0 |> migrate_Id_Id)
                (p1 |> migrate_Route_ThreadRouteWithFriends)

        Evergreen.V104.Route.AiChatRoute ->
            Evergreen.V108.Route.AiChatRoute

        Evergreen.V104.Route.SlackOAuthRedirect p0 ->
            Evergreen.V108.Route.SlackOAuthRedirect (p0 |> Result.map (Tuple.mapBoth migrate_Slack_OAuthCode migrate_SessionIdHash_SessionIdHash))


migrate_Route_ShowMembersTab : Evergreen.V104.Route.ShowMembersTab -> Evergreen.V108.Route.ShowMembersTab
migrate_Route_ShowMembersTab old =
    case old of
        Evergreen.V104.Route.ShowMembersTab ->
            Evergreen.V108.Route.ShowMembersTab

        Evergreen.V104.Route.HideMembersTab ->
            Evergreen.V108.Route.HideMembersTab


migrate_Route_ThreadRouteWithFriends : Evergreen.V104.Route.ThreadRouteWithFriends -> Evergreen.V108.Route.ThreadRouteWithFriends
migrate_Route_ThreadRouteWithFriends old =
    case old of
        Evergreen.V104.Route.NoThreadWithFriends p0 p1 ->
            Evergreen.V108.Route.NoThreadWithFriends (p0 |> Maybe.map migrate_Id_Id)
                (p1 |> migrate_Route_ShowMembersTab)

        Evergreen.V104.Route.ViewThreadWithFriends p0 p1 p2 ->
            Evergreen.V108.Route.ViewThreadWithFriends (p0 |> migrate_Id_Id)
                (p1 |> Maybe.map migrate_Id_Id)
                (p2 |> migrate_Route_ShowMembersTab)


migrate_SecretId_SecretId : Evergreen.V104.SecretId.SecretId a_old -> Evergreen.V108.SecretId.SecretId a_new
migrate_SecretId_SecretId old =
    case old of
        Evergreen.V104.SecretId.SecretId p0 ->
            Evergreen.V108.SecretId.SecretId p0


migrate_SessionIdHash_SessionIdHash : Evergreen.V104.SessionIdHash.SessionIdHash -> Evergreen.V108.SessionIdHash.SessionIdHash
migrate_SessionIdHash_SessionIdHash old =
    case old of
        Evergreen.V104.SessionIdHash.SessionIdHash p0 ->
            Evergreen.V108.SessionIdHash.SessionIdHash p0


migrate_Slack_ClientSecret : Evergreen.V104.Slack.ClientSecret -> Evergreen.V108.Slack.ClientSecret
migrate_Slack_ClientSecret old =
    case old of
        Evergreen.V104.Slack.ClientSecret p0 ->
            Evergreen.V108.Slack.ClientSecret p0


migrate_Slack_OAuthCode : Evergreen.V104.Slack.OAuthCode -> Evergreen.V108.Slack.OAuthCode
migrate_Slack_OAuthCode old =
    case old of
        Evergreen.V104.Slack.OAuthCode p0 ->
            Evergreen.V108.Slack.OAuthCode p0


migrate_Table_Model : Evergreen.V104.Table.Model -> Evergreen.V108.Table.Model
migrate_Table_Model old =
    old


migrate_Table_Msg : Evergreen.V104.Table.Msg -> Evergreen.V108.Table.Msg
migrate_Table_Msg old =
    case old of
        Evergreen.V104.Table.PressedSortBy p0 ->
            Evergreen.V108.Table.PressedSortBy p0

        Evergreen.V104.Table.PressedShowAll ->
            Evergreen.V108.Table.PressedShowAll


migrate_Touch_ScreenCoordinate : Evergreen.V104.Touch.ScreenCoordinate -> Evergreen.V108.Touch.ScreenCoordinate
migrate_Touch_ScreenCoordinate old =
    case old of
        Evergreen.V104.Touch.ScreenCoordinate p0 ->
            Evergreen.V108.Touch.ScreenCoordinate p0


migrate_Touch_Touch : Evergreen.V104.Touch.Touch -> Evergreen.V108.Touch.Touch
migrate_Touch_Touch old =
    { client = old.client |> migrate_Point2d_Point2d migrate_CssPixels_CssPixels migrate_Touch_ScreenCoordinate
    , target = Just old.target
    }


migrate_TwoFactorAuthentication_Msg : Evergreen.V104.TwoFactorAuthentication.Msg -> Evergreen.V108.TwoFactorAuthentication.Msg
migrate_TwoFactorAuthentication_Msg old =
    case old of
        Evergreen.V104.TwoFactorAuthentication.PressedStart2FaSetup ->
            Evergreen.V108.TwoFactorAuthentication.PressedStart2FaSetup

        Evergreen.V104.TwoFactorAuthentication.PressedCopy p0 ->
            Evergreen.V108.TwoFactorAuthentication.PressedCopy p0

        Evergreen.V104.TwoFactorAuthentication.TypedTwoFactorCode p0 ->
            Evergreen.V108.TwoFactorAuthentication.TypedTwoFactorCode p0


migrate_TwoFactorAuthentication_TwoFactorSetupData : Evergreen.V104.TwoFactorAuthentication.TwoFactorSetupData -> Evergreen.V108.TwoFactorAuthentication.TwoFactorSetupData
migrate_TwoFactorAuthentication_TwoFactorSetupData old =
    { qrCodeUrl = old.qrCodeUrl
    , code = old.code
    , attempts = old.attempts |> SeqDict.map (\k -> migrate_LoginForm_CodeStatus)
    }


migrate_TwoFactorAuthentication_TwoFactorState : Evergreen.V104.TwoFactorAuthentication.TwoFactorState -> Evergreen.V108.TwoFactorAuthentication.TwoFactorState
migrate_TwoFactorAuthentication_TwoFactorState old =
    case old of
        Evergreen.V104.TwoFactorAuthentication.TwoFactorNotStarted ->
            Evergreen.V108.TwoFactorAuthentication.TwoFactorNotStarted

        Evergreen.V104.TwoFactorAuthentication.TwoFactorLoading ->
            Evergreen.V108.TwoFactorAuthentication.TwoFactorLoading

        Evergreen.V104.TwoFactorAuthentication.TwoFactorSetup p0 ->
            Evergreen.V108.TwoFactorAuthentication.TwoFactorSetup (p0 |> migrate_TwoFactorAuthentication_TwoFactorSetupData)

        Evergreen.V104.TwoFactorAuthentication.TwoFactorComplete ->
            Evergreen.V108.TwoFactorAuthentication.TwoFactorComplete

        Evergreen.V104.TwoFactorAuthentication.TwoFactorAlreadyComplete p0 ->
            Evergreen.V108.TwoFactorAuthentication.TwoFactorAlreadyComplete p0


migrate_Types_AdminStatusLoginData : Evergreen.V104.Types.AdminStatusLoginData -> Evergreen.V108.Types.AdminStatusLoginData
migrate_Types_AdminStatusLoginData old =
    case old of
        Evergreen.V104.Types.IsAdminLoginData p0 ->
            Evergreen.V108.Types.IsAdminLoginData (p0 |> migrate_Pages_Admin_InitAdminData)

        Evergreen.V104.Types.IsNotAdminLoginData ->
            Evergreen.V108.Types.IsNotAdminLoginData


migrate_Types_ChannelSidebarMode : Evergreen.V104.Types.ChannelSidebarMode -> Evergreen.V108.Types.ChannelSidebarMode
migrate_Types_ChannelSidebarMode old =
    case old of
        Evergreen.V104.Types.ChannelSidebarClosed ->
            Evergreen.V108.Types.ChannelSidebarClosed

        Evergreen.V104.Types.ChannelSidebarOpened ->
            Evergreen.V108.Types.ChannelSidebarOpened

        Evergreen.V104.Types.ChannelSidebarClosing p0 ->
            Evergreen.V108.Types.ChannelSidebarClosing p0

        Evergreen.V104.Types.ChannelSidebarOpening p0 ->
            Evergreen.V108.Types.ChannelSidebarOpening p0

        Evergreen.V104.Types.ChannelSidebarDragging p0 ->
            Evergreen.V108.Types.ChannelSidebarDragging p0


migrate_Types_Drag : Evergreen.V104.Types.Drag -> Evergreen.V108.Types.Drag
migrate_Types_Drag old =
    case old of
        Evergreen.V104.Types.NoDrag ->
            Evergreen.V108.Types.NoDrag

        Evergreen.V104.Types.DragStart p0 p1 ->
            Evergreen.V108.Types.DragStart p0
                (p1 |> migrate_NonemptyDict_NonemptyDict identity migrate_Touch_Touch)

        Evergreen.V104.Types.Dragging p0 ->
            Evergreen.V108.Types.Dragging
                { horizontalStart = p0.horizontalStart
                , touches = p0.touches |> migrate_NonemptyDict_NonemptyDict identity migrate_Touch_Touch
                }


migrate_Types_EditMessage : Evergreen.V104.Types.EditMessage -> Evergreen.V108.Types.EditMessage
migrate_Types_EditMessage old =
    { messageIndex = old.messageIndex |> migrate_Id_Id
    , text = old.text
    , attachedFiles = old.attachedFiles |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_FileStatus_FileStatus) |> SeqDict.fromList
    }


migrate_Types_EmojiSelector : Evergreen.V104.Types.EmojiSelector -> Evergreen.V108.Types.EmojiSelector
migrate_Types_EmojiSelector old =
    case old of
        Evergreen.V104.Types.EmojiSelectorHidden ->
            Evergreen.V108.Types.EmojiSelectorHidden

        Evergreen.V104.Types.EmojiSelectorForReaction p0 p1 ->
            Evergreen.V108.Types.EmojiSelectorForReaction (p0 |> migrate_Id_GuildOrDmIdNoThread)
                (p1 |> migrate_Id_ThreadRouteWithMessage)

        Evergreen.V104.Types.EmojiSelectorForMessage ->
            Evergreen.V108.Types.EmojiSelectorForMessage


migrate_Types_FrontendModel : Evergreen.V104.Types.FrontendModel -> Evergreen.V108.Types.FrontendModel
migrate_Types_FrontendModel old =
    case old of
        Evergreen.V104.Types.Loading p0 ->
            Evergreen.V108.Types.Loading (p0 |> migrate_Types_LoadingFrontend)

        Evergreen.V104.Types.Loaded p0 ->
            Evergreen.V108.Types.Loaded (p0 |> migrate_Types_LoadedFrontend)


migrate_Types_FrontendMsg : Evergreen.V104.Types.FrontendMsg -> Evergreen.V108.Types.FrontendMsg
migrate_Types_FrontendMsg old =
    case old of
        Evergreen.V104.Types.UrlClicked p0 ->
            Evergreen.V108.Types.UrlClicked p0

        Evergreen.V104.Types.UrlChanged p0 ->
            Evergreen.V108.Types.UrlChanged p0

        Evergreen.V104.Types.GotTime p0 ->
            Evergreen.V108.Types.GotTime p0

        Evergreen.V104.Types.GotWindowSize p0 p1 ->
            Evergreen.V108.Types.GotWindowSize p0 p1

        Evergreen.V104.Types.GotTimezone p0 ->
            Evergreen.V108.Types.GotTimezone p0

        Evergreen.V104.Types.LoginFormMsg p0 ->
            Evergreen.V108.Types.LoginFormMsg (p0 |> migrate_LoginForm_Msg)

        Evergreen.V104.Types.PressedShowLogin ->
            Evergreen.V108.Types.PressedShowLogin

        Evergreen.V104.Types.AdminPageMsg p0 ->
            Evergreen.V108.Types.AdminPageMsg (p0 |> migrate_Pages_Admin_Msg)

        Evergreen.V104.Types.PressedLogOut ->
            Evergreen.V108.Types.PressedLogOut

        Evergreen.V104.Types.ElmUiMsg p0 ->
            Evergreen.V108.Types.ElmUiMsg (p0 |> migrate_Ui_Anim_Msg)

        Evergreen.V104.Types.ScrolledToLogSection ->
            Evergreen.V108.Types.ScrolledToLogSection

        Evergreen.V104.Types.PressedLink p0 ->
            Evergreen.V108.Types.PressedLink (p0 |> migrate_Route_Route)

        Evergreen.V104.Types.PressedTextInput ->
            Evergreen.V108.Types.PressedTextInput

        Evergreen.V104.Types.TypedMessage p0 p1 ->
            Evergreen.V108.Types.TypedMessage (p0 |> migrate_Id_GuildOrDmId) p1

        Evergreen.V104.Types.PressedSendMessage p0 p1 ->
            Evergreen.V108.Types.PressedSendMessage (p0 |> migrate_Id_GuildOrDmIdNoThread)
                (p1 |> migrate_Id_ThreadRoute)

        Evergreen.V104.Types.PressedAttachFiles p0 ->
            Evergreen.V108.Types.PressedAttachFiles (p0 |> migrate_Id_GuildOrDmId)

        Evergreen.V104.Types.SelectedFilesToAttach p0 p1 p2 ->
            Evergreen.V108.Types.SelectedFilesToAttach (p0 |> migrate_Id_GuildOrDmId) p1 p2

        Evergreen.V104.Types.NewChannelFormChanged p0 p1 ->
            Evergreen.V108.Types.NewChannelFormChanged (p0 |> migrate_Id_Id)
                (p1 |> migrate_Types_NewChannelForm)

        Evergreen.V104.Types.PressedSubmitNewChannel p0 p1 ->
            Evergreen.V108.Types.PressedSubmitNewChannel (p0 |> migrate_Id_Id)
                (p1 |> migrate_Types_NewChannelForm)

        Evergreen.V104.Types.MouseEnteredChannelName p0 p1 p2 ->
            Evergreen.V108.Types.MouseEnteredChannelName (p0 |> migrate_Id_Id)
                (p1 |> migrate_Id_Id)
                (p2 |> migrate_Id_ThreadRoute)

        Evergreen.V104.Types.MouseExitedChannelName p0 p1 p2 ->
            Evergreen.V108.Types.MouseExitedChannelName (p0 |> migrate_Id_Id)
                (p1 |> migrate_Id_Id)
                (p2 |> migrate_Id_ThreadRoute)

        Evergreen.V104.Types.EditChannelFormChanged p0 p1 p2 ->
            Evergreen.V108.Types.EditChannelFormChanged (p0 |> migrate_Id_Id)
                (p1 |> migrate_Id_Id)
                (p2 |> migrate_Types_NewChannelForm)

        Evergreen.V104.Types.PressedCancelEditChannelChanges p0 p1 ->
            Evergreen.V108.Types.PressedCancelEditChannelChanges (p0 |> migrate_Id_Id) (p1 |> migrate_Id_Id)

        Evergreen.V104.Types.PressedSubmitEditChannelChanges p0 p1 p2 ->
            Evergreen.V108.Types.PressedSubmitEditChannelChanges (p0 |> migrate_Id_Id)
                (p1 |> migrate_Id_Id)
                (p2 |> migrate_Types_NewChannelForm)

        Evergreen.V104.Types.PressedDeleteChannel p0 p1 ->
            Evergreen.V108.Types.PressedDeleteChannel (p0 |> migrate_Id_Id) (p1 |> migrate_Id_Id)

        Evergreen.V104.Types.PressedCreateInviteLink p0 ->
            Evergreen.V108.Types.PressedCreateInviteLink (p0 |> migrate_Id_Id)

        Evergreen.V104.Types.FrontendNoOp ->
            Evergreen.V108.Types.FrontendNoOp

        Evergreen.V104.Types.PressedCopyText p0 ->
            Evergreen.V108.Types.PressedCopyText p0

        Evergreen.V104.Types.PressedCreateGuild ->
            Evergreen.V108.Types.PressedCreateGuild

        Evergreen.V104.Types.NewGuildFormChanged p0 ->
            Evergreen.V108.Types.NewGuildFormChanged (p0 |> migrate_Types_NewGuildForm)

        Evergreen.V104.Types.PressedSubmitNewGuild p0 ->
            Evergreen.V108.Types.PressedSubmitNewGuild (p0 |> migrate_Types_NewGuildForm)

        Evergreen.V104.Types.PressedCancelNewGuild ->
            Evergreen.V108.Types.PressedCancelNewGuild

        Evergreen.V104.Types.DebouncedTyping ->
            Evergreen.V108.Types.DebouncedTyping

        Evergreen.V104.Types.GotPingUserPosition p0 ->
            Evergreen.V108.Types.GotPingUserPosition (p0 |> Result.map migrate_MessageInput_MentionUserDropdown)

        Evergreen.V104.Types.PressedPingUser p0 p1 ->
            Evergreen.V108.Types.PressedPingUser (p0 |> migrate_Id_GuildOrDmId) p1

        Evergreen.V104.Types.SetFocus ->
            Evergreen.V108.Types.SetFocus

        Evergreen.V104.Types.RemoveFocus ->
            Evergreen.V108.Types.RemoveFocus

        Evergreen.V104.Types.PressedArrowInDropdown p0 p1 ->
            Evergreen.V108.Types.PressedArrowInDropdown (p0 |> migrate_Id_GuildOrDmIdNoThread) p1

        Evergreen.V104.Types.TextInputGotFocus p0 ->
            Evergreen.V108.Types.TextInputGotFocus p0

        Evergreen.V104.Types.TextInputLostFocus p0 ->
            Evergreen.V108.Types.TextInputLostFocus p0

        Evergreen.V104.Types.KeyDown p0 ->
            Evergreen.V108.Types.KeyDown p0

        Evergreen.V104.Types.MessageMenu_PressedShowReactionEmojiSelector p0 p1 p2 ->
            Evergreen.V108.Types.MessageMenu_PressedShowReactionEmojiSelector (p0 |> migrate_Id_GuildOrDmIdNoThread)
                (p1 |> migrate_Id_ThreadRouteWithMessage)
                (p2 |> migrate_Coord_Coord migrate_CssPixels_CssPixels)

        Evergreen.V104.Types.MessageMenu_PressedEditMessage p0 p1 ->
            Evergreen.V108.Types.MessageMenu_PressedEditMessage (p0 |> migrate_Id_GuildOrDmIdNoThread)
                (p1 |> migrate_Id_ThreadRouteWithMessage)

        Evergreen.V104.Types.PressedEmojiSelectorEmoji p0 ->
            Evergreen.V108.Types.PressedEmojiSelectorEmoji (p0 |> migrate_Emoji_Emoji)

        Evergreen.V104.Types.GotPingUserPositionForEditMessage p0 ->
            Evergreen.V108.Types.GotPingUserPositionForEditMessage (p0 |> Result.map migrate_MessageInput_MentionUserDropdown)

        Evergreen.V104.Types.TypedEditMessage p0 p1 ->
            Evergreen.V108.Types.TypedEditMessage (p0 |> migrate_Id_GuildOrDmId) p1

        Evergreen.V104.Types.PressedSendEditMessage p0 ->
            Evergreen.V108.Types.PressedSendEditMessage (p0 |> migrate_Id_GuildOrDmId)

        Evergreen.V104.Types.PressedArrowInDropdownForEditMessage p0 p1 ->
            Evergreen.V108.Types.PressedArrowInDropdownForEditMessage (p0 |> migrate_Id_GuildOrDmIdNoThread) p1

        Evergreen.V104.Types.PressedPingUserForEditMessage p0 p1 ->
            Evergreen.V108.Types.PressedPingUserForEditMessage (p0 |> migrate_Id_GuildOrDmId) p1

        Evergreen.V104.Types.PressedArrowUpInEmptyInput p0 ->
            Evergreen.V108.Types.PressedArrowUpInEmptyInput (p0 |> migrate_Id_GuildOrDmId)

        Evergreen.V104.Types.MessageMenu_PressedReply p0 ->
            Evergreen.V108.Types.MessageMenu_PressedReply (p0 |> migrate_Id_ThreadRouteWithMessage)

        Evergreen.V104.Types.MessageMenu_PressedOpenThread p0 ->
            Evergreen.V108.Types.MessageMenu_PressedOpenThread (p0 |> migrate_Id_Id)

        Evergreen.V104.Types.PressedCloseReplyTo p0 ->
            Evergreen.V108.Types.PressedCloseReplyTo (p0 |> migrate_Id_GuildOrDmId)

        Evergreen.V104.Types.VisibilityChanged p0 ->
            Evergreen.V108.Types.VisibilityChanged p0

        Evergreen.V104.Types.CheckedNotificationPermission p0 ->
            Evergreen.V108.Types.CheckedNotificationPermission (p0 |> migrate_Ports_NotificationPermission)

        Evergreen.V104.Types.CheckedPwaStatus p0 ->
            Evergreen.V108.Types.CheckedPwaStatus (p0 |> migrate_Ports_PwaStatus)

        Evergreen.V104.Types.TouchStart p0 p1 p2 ->
            Evergreen.V108.Types.TouchStart (p0 |> Maybe.map (\( t1, t2, t3 ) -> ( t1 |> migrate_Id_GuildOrDmIdNoThread, t2 |> migrate_Id_ThreadRouteWithMessage, t3 )))
                p1
                (p2 |> migrate_NonemptyDict_NonemptyDict identity migrate_Touch_Touch)

        Evergreen.V104.Types.TouchMoved p0 p1 ->
            Evergreen.V108.Types.TouchMoved p0
                (p1 |> migrate_NonemptyDict_NonemptyDict identity migrate_Touch_Touch)

        Evergreen.V104.Types.TouchEnd p0 ->
            Evergreen.V108.Types.TouchEnd p0

        Evergreen.V104.Types.TouchCancel p0 ->
            Evergreen.V108.Types.TouchCancel p0

        Evergreen.V104.Types.ChannelSidebarAnimated p0 ->
            Evergreen.V108.Types.ChannelSidebarAnimated p0

        Evergreen.V104.Types.MessageMenuAnimated p0 ->
            Evergreen.V108.Types.MessageMenuAnimated p0

        Evergreen.V104.Types.SetScrollToBottom ->
            Evergreen.V108.Types.SetScrollToBottom

        Evergreen.V104.Types.PressedChannelHeaderBackButton ->
            Evergreen.V108.Types.PressedChannelHeaderBackButton

        Evergreen.V104.Types.PressedShowMembers ->
            Evergreen.V108.Types.PressedShowMembers

        Evergreen.V104.Types.UserScrolled p0 p1 p2 ->
            Evergreen.V108.Types.UserScrolled (p0 |> migrate_Id_GuildOrDmIdNoThread)
                (p1 |> migrate_Id_ThreadRoute)
                (p2 |> migrate_Types_ScrollPosition)

        Evergreen.V104.Types.PressedBody ->
            Evergreen.V108.Types.PressedBody

        Evergreen.V104.Types.PressedReactionEmojiContainer ->
            Evergreen.V108.Types.PressedReactionEmojiContainer

        Evergreen.V104.Types.MessageMenu_PressedDeleteMessage p0 p1 ->
            Evergreen.V108.Types.MessageMenu_PressedDeleteMessage (p0 |> migrate_Id_GuildOrDmIdNoThread)
                (p1 |> migrate_Id_ThreadRouteWithMessage)

        Evergreen.V104.Types.ScrolledToMessage ->
            Evergreen.V108.Types.ScrolledToMessage

        Evergreen.V104.Types.MessageMenu_PressedClose ->
            Evergreen.V108.Types.MessageMenu_PressedClose

        Evergreen.V104.Types.MessageMenu_PressedContainer ->
            Evergreen.V108.Types.MessageMenu_PressedContainer

        Evergreen.V104.Types.PressedCancelMessageEdit p0 ->
            Evergreen.V108.Types.PressedCancelMessageEdit (p0 |> migrate_Id_GuildOrDmId)

        Evergreen.V104.Types.PressedPingDropdownContainer ->
            Evergreen.V108.Types.PressedPingDropdownContainer

        Evergreen.V104.Types.PressedEditMessagePingDropdownContainer ->
            Evergreen.V108.Types.PressedEditMessagePingDropdownContainer

        Evergreen.V104.Types.CheckMessageAltPress p0 p1 p2 p3 ->
            Evergreen.V108.Types.CheckMessageAltPress p0
                (p1 |> migrate_Id_GuildOrDmIdNoThread)
                (p2 |> migrate_Id_ThreadRouteWithMessage)
                p3

        Evergreen.V104.Types.PressedShowUserOption ->
            Evergreen.V108.Types.PressedShowUserOption

        Evergreen.V104.Types.PressedCloseUserOptions ->
            Evergreen.V108.Types.PressedCloseUserOptions

        Evergreen.V104.Types.TwoFactorMsg p0 ->
            Evergreen.V108.Types.TwoFactorMsg (p0 |> migrate_TwoFactorAuthentication_Msg)

        Evergreen.V104.Types.AiChatMsg p0 ->
            Evergreen.V108.Types.AiChatMsg (p0 |> migrate_AiChat_Msg)

        Evergreen.V104.Types.UserNameEditableMsg p0 ->
            Evergreen.V108.Types.UserNameEditableMsg (p0 |> migrate_Editable_Msg migrate_PersonName_PersonName)

        Evergreen.V104.Types.BotTokenEditableMsg p0 ->
            Evergreen.V108.Types.BotTokenEditableMsg (p0 |> migrate_Editable_Msg (Maybe.map migrate_LocalState_DiscordBotToken))

        Evergreen.V104.Types.SlackClientSecretEditableMsg p0 ->
            Evergreen.V108.Types.SlackClientSecretEditableMsg (p0 |> migrate_Editable_Msg (Maybe.map migrate_Slack_ClientSecret))

        Evergreen.V104.Types.PublicVapidKeyEditableMsg p0 ->
            Evergreen.V108.Types.PublicVapidKeyEditableMsg (p0 |> migrate_Editable_Msg identity)

        Evergreen.V104.Types.PrivateVapidKeyEditableMsg p0 ->
            Evergreen.V108.Types.PrivateVapidKeyEditableMsg (p0 |> migrate_Editable_Msg migrate_LocalState_PrivateVapidKey)

        Evergreen.V104.Types.OpenRouterKeyEditableMsg p0 ->
            Evergreen.V108.Types.OpenRouterKeyEditableMsg (p0 |> migrate_Editable_Msg identity)

        Evergreen.V104.Types.OneFrameAfterDragEnd ->
            Evergreen.V108.Types.OneFrameAfterDragEnd

        Evergreen.V104.Types.GotFileHashName p0 p1 p2 ->
            Evergreen.V108.Types.GotFileHashName (p0 |> migrate_Id_GuildOrDmId)
                (p1 |> migrate_Id_Id)
                (p2 |> Result.map migrate_FileStatus_UploadResponse)

        Evergreen.V104.Types.PressedDeleteAttachedFile p0 p1 ->
            Evergreen.V108.Types.PressedDeleteAttachedFile (p0 |> migrate_Id_GuildOrDmId)
                (p1 |> migrate_Id_Id)

        Evergreen.V104.Types.PressedViewAttachedFileInfo p0 p1 ->
            Evergreen.V108.Types.PressedViewAttachedFileInfo (p0 |> migrate_Id_GuildOrDmId)
                (p1 |> migrate_Id_Id)

        Evergreen.V104.Types.EditMessage_PressedDeleteAttachedFile p0 p1 ->
            Evergreen.V108.Types.EditMessage_PressedDeleteAttachedFile (p0 |> migrate_Id_GuildOrDmId)
                (p1 |> migrate_Id_Id)

        Evergreen.V104.Types.EditMessage_PressedViewAttachedFileInfo p0 p1 ->
            Evergreen.V108.Types.EditMessage_PressedViewAttachedFileInfo (p0 |> migrate_Id_GuildOrDmId)
                (p1 |> migrate_Id_Id)

        Evergreen.V104.Types.EditMessage_PressedAttachFiles p0 ->
            Evergreen.V108.Types.EditMessage_PressedAttachFiles (p0 |> migrate_Id_GuildOrDmId)

        Evergreen.V104.Types.EditMessage_SelectedFilesToAttach p0 p1 p2 ->
            Evergreen.V108.Types.EditMessage_SelectedFilesToAttach (p0 |> migrate_Id_GuildOrDmId) p1 p2

        Evergreen.V104.Types.EditMessage_GotFileHashName p0 p1 p2 p3 ->
            Evergreen.V108.Types.EditMessage_GotFileHashName (p0 |> migrate_Id_GuildOrDmId)
                (p1 |> migrate_Id_Id)
                (p2 |> migrate_Id_Id)
                (p3 |> Result.map migrate_FileStatus_UploadResponse)

        Evergreen.V104.Types.EditMessage_PastedFiles p0 p1 ->
            Evergreen.V108.Types.EditMessage_PastedFiles (p0 |> migrate_Id_GuildOrDmId) p1

        Evergreen.V104.Types.PastedFiles p0 p1 ->
            Evergreen.V108.Types.PastedFiles (p0 |> migrate_Id_GuildOrDmId) p1

        Evergreen.V104.Types.FileUploadProgress p0 p1 p2 ->
            Evergreen.V108.Types.FileUploadProgress (p0 |> migrate_Id_GuildOrDmId)
                (p1 |> migrate_Id_Id)
                p2

        Evergreen.V104.Types.MessageViewMsg p0 p1 p2 ->
            Evergreen.V108.Types.MessageViewMsg (p0 |> migrate_Id_GuildOrDmIdNoThread)
                (p1 |> migrate_Id_ThreadRouteWithMessage)
                (p2 |> migrate_MessageView_MessageViewMsg)

        Evergreen.V104.Types.GotRegisterPushSubscription p0 ->
            Evergreen.V108.Types.GotRegisterPushSubscription p0

        Evergreen.V104.Types.SelectedNotificationMode p0 ->
            Evergreen.V108.Types.SelectedNotificationMode (p0 |> migrate_UserSession_NotificationMode)

        Evergreen.V104.Types.PressedGuildNotificationLevel p0 p1 ->
            Evergreen.V108.Types.PressedGuildNotificationLevel (p0 |> migrate_Id_Id)
                (p1 |> migrate_User_NotificationLevel)

        Evergreen.V104.Types.GotScrollbarWidth p0 ->
            Evergreen.V108.Types.GotScrollbarWidth p0

        Evergreen.V104.Types.PressedCloseImageInfo ->
            Evergreen.V108.Types.PressedCloseImageInfo

        Evergreen.V104.Types.PressedMemberListBack ->
            Evergreen.V108.Types.PressedMemberListBack

        Evergreen.V104.Types.GotUserAgent p0 ->
            Evergreen.V108.Types.GotUserAgent (p0 |> migrate_UserAgent_UserAgent)

        Evergreen.V104.Types.PageHasFocusChanged p0 ->
            Evergreen.V108.Types.PageHasFocusChanged p0

        Evergreen.V104.Types.GotServiceWorkerMessage p0 ->
            Evergreen.V108.Types.GotServiceWorkerMessage p0

        Evergreen.V104.Types.VisualViewportResized p0 ->
            Evergreen.V108.Types.VisualViewportResized p0


migrate_Types_GuildChannelAndMessageId : Evergreen.V104.Types.GuildChannelAndMessageId -> Evergreen.V108.Types.GuildChannelAndMessageId
migrate_Types_GuildChannelAndMessageId old =
    { guildId = old.guildId |> migrate_Id_Id
    , channelId = old.channelId |> migrate_Id_Id
    , messageIndex = old.messageIndex |> migrate_Id_Id
    }


migrate_Types_LoadStatus : Evergreen.V104.Types.LoadStatus -> Evergreen.V108.Types.LoadStatus
migrate_Types_LoadStatus old =
    case old of
        Evergreen.V104.Types.LoadingData ->
            Evergreen.V108.Types.LoadingData

        Evergreen.V104.Types.LoadSuccess p0 ->
            Evergreen.V108.Types.LoadSuccess (p0 |> migrate_Types_LoginData)

        Evergreen.V104.Types.LoadError ->
            Evergreen.V108.Types.LoadError


migrate_Types_LoadedFrontend : Evergreen.V104.Types.LoadedFrontend -> Evergreen.V108.Types.LoadedFrontend
migrate_Types_LoadedFrontend old =
    { navigationKey = old.navigationKey
    , route = old.route |> migrate_Route_Route
    , time = old.time
    , timezone = old.timezone
    , windowSize = old.windowSize |> migrate_Coord_Coord migrate_CssPixels_CssPixels
    , virtualKeyboardOpen = old.virtualKeyboardOpen
    , loginStatus = old.loginStatus |> migrate_Types_LoginStatus
    , elmUiState = old.elmUiState |> migrate_Ui_Anim_State
    , lastCopied = old.lastCopied
    , textInputFocus = old.textInputFocus
    , notificationPermission = old.notificationPermission |> migrate_Ports_NotificationPermission
    , pwaStatus = old.pwaStatus |> migrate_Ports_PwaStatus
    , drag = old.drag |> migrate_Types_Drag
    , dragPrevious = old.dragPrevious |> migrate_Types_Drag
    , aiChatModel = old.aiChatModel |> migrate_AiChat_FrontendModel
    , scrollbarWidth = old.scrollbarWidth
    , userAgent = old.userAgent |> migrate_UserAgent_UserAgent
    , pageHasFocus = old.pageHasFocus
    }


migrate_Types_LoadingFrontend : Evergreen.V104.Types.LoadingFrontend -> Evergreen.V108.Types.LoadingFrontend
migrate_Types_LoadingFrontend old =
    { navigationKey = old.navigationKey
    , route = old.route |> migrate_Route_Route
    , windowSize = old.windowSize |> migrate_Coord_Coord migrate_CssPixels_CssPixels
    , time = old.time
    , loginStatus = old.loginStatus |> migrate_Types_LoadStatus
    , notificationPermission = old.notificationPermission |> migrate_Ports_NotificationPermission
    , pwaStatus = old.pwaStatus |> migrate_Ports_PwaStatus
    , timezone = old.timezone
    , scrollbarWidth = old.scrollbarWidth
    , userAgent = old.userAgent |> Maybe.map migrate_UserAgent_UserAgent
    }


migrate_Types_LocalChange : Evergreen.V104.Types.LocalChange -> Evergreen.V108.Types.LocalChange
migrate_Types_LocalChange old =
    case old of
        Evergreen.V104.Types.Local_Invalid ->
            Evergreen.V108.Types.Local_Invalid

        Evergreen.V104.Types.Local_Admin p0 ->
            Evergreen.V108.Types.Local_Admin (p0 |> migrate_Pages_Admin_AdminChange)

        Evergreen.V104.Types.Local_SendMessage p0 p1 p2 p3 p4 ->
            Evergreen.V108.Types.Local_SendMessage p0
                (p1 |> migrate_Id_GuildOrDmIdNoThread)
                (p2 |> migrate_List_Nonempty_Nonempty migrate_RichText_RichText)
                (p3 |> migrate_Id_ThreadRouteWithMaybeMessage)
                (p4 |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_FileStatus_FileData) |> SeqDict.fromList)

        Evergreen.V104.Types.Local_NewChannel p0 p1 p2 ->
            Evergreen.V108.Types.Local_NewChannel p0
                (p1 |> migrate_Id_Id)
                (p2 |> migrate_ChannelName_ChannelName)

        Evergreen.V104.Types.Local_EditChannel p0 p1 p2 ->
            Evergreen.V108.Types.Local_EditChannel (p0 |> migrate_Id_Id)
                (p1 |> migrate_Id_Id)
                (p2 |> migrate_ChannelName_ChannelName)

        Evergreen.V104.Types.Local_DeleteChannel p0 p1 ->
            Evergreen.V108.Types.Local_DeleteChannel (p0 |> migrate_Id_Id) (p1 |> migrate_Id_Id)

        Evergreen.V104.Types.Local_NewInviteLink p0 p1 p2 ->
            Evergreen.V108.Types.Local_NewInviteLink p0
                (p1 |> migrate_Id_Id)
                (p2 |> migrate_UserSession_ToBeFilledInByBackend migrate_SecretId_SecretId)

        Evergreen.V104.Types.Local_NewGuild p0 p1 p2 ->
            Evergreen.V108.Types.Local_NewGuild p0
                (p1 |> migrate_GuildName_GuildName)
                (p2 |> migrate_UserSession_ToBeFilledInByBackend migrate_Id_Id)

        Evergreen.V104.Types.Local_MemberTyping p0 p1 ->
            Evergreen.V108.Types.Local_MemberTyping p0 (p1 |> migrate_Id_GuildOrDmId)

        Evergreen.V104.Types.Local_AddReactionEmoji p0 p1 p2 ->
            Evergreen.V108.Types.Local_AddReactionEmoji (p0 |> migrate_Id_GuildOrDmIdNoThread)
                (p1 |> migrate_Id_ThreadRouteWithMessage)
                (p2 |> migrate_Emoji_Emoji)

        Evergreen.V104.Types.Local_RemoveReactionEmoji p0 p1 p2 ->
            Evergreen.V108.Types.Local_RemoveReactionEmoji (p0 |> migrate_Id_GuildOrDmIdNoThread)
                (p1 |> migrate_Id_ThreadRouteWithMessage)
                (p2 |> migrate_Emoji_Emoji)

        Evergreen.V104.Types.Local_SendEditMessage p0 p1 p2 p3 p4 ->
            Evergreen.V108.Types.Local_SendEditMessage p0
                (p1 |> migrate_Id_GuildOrDmIdNoThread)
                (p2 |> migrate_Id_ThreadRouteWithMessage)
                (p3 |> migrate_List_Nonempty_Nonempty migrate_RichText_RichText)
                (p4 |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_FileStatus_FileData) |> SeqDict.fromList)

        Evergreen.V104.Types.Local_MemberEditTyping p0 p1 p2 ->
            Evergreen.V108.Types.Local_MemberEditTyping p0
                (p1 |> migrate_Id_GuildOrDmIdNoThread)
                (p2 |> migrate_Id_ThreadRouteWithMessage)

        Evergreen.V104.Types.Local_SetLastViewed p0 p1 ->
            Evergreen.V108.Types.Local_SetLastViewed (p0 |> migrate_Id_GuildOrDmIdNoThread)
                (p1 |> migrate_Id_ThreadRouteWithMessage)

        Evergreen.V104.Types.Local_DeleteMessage p0 p1 ->
            Evergreen.V108.Types.Local_DeleteMessage (p0 |> migrate_Id_GuildOrDmIdNoThread)
                (p1 |> migrate_Id_ThreadRouteWithMessage)

        Evergreen.V104.Types.Local_CurrentlyViewing p0 ->
            Evergreen.V108.Types.Local_CurrentlyViewing (p0 |> migrate_UserSession_SetViewing)

        Evergreen.V104.Types.Local_SetName p0 ->
            Evergreen.V108.Types.Local_SetName (p0 |> migrate_PersonName_PersonName)

        Evergreen.V104.Types.Local_LoadChannelMessages p0 p1 p2 ->
            Evergreen.V108.Types.Local_LoadChannelMessages (p0 |> migrate_Id_GuildOrDmIdNoThread)
                (p1 |> migrate_Id_Id)
                (p2 |> migrate_UserSession_ToBeFilledInByBackend (\a -> SeqDict.toList a |> List.map (Tuple.mapBoth migrate_Id_Id (migrate_Message_Message migrate_Id_ChannelMessageId)) |> SeqDict.fromList))

        Evergreen.V104.Types.Local_LoadThreadMessages p0 p1 p2 p3 ->
            Evergreen.V108.Types.Local_LoadThreadMessages (p0 |> migrate_Id_GuildOrDmIdNoThread)
                (p1 |> migrate_Id_Id)
                (p2 |> migrate_Id_Id)
                (p3 |> migrate_UserSession_ToBeFilledInByBackend (\a -> SeqDict.toList a |> List.map (Tuple.mapBoth migrate_Id_Id (migrate_Message_Message migrate_Id_ThreadMessageId)) |> SeqDict.fromList))

        Evergreen.V104.Types.Local_SetGuildNotificationLevel p0 p1 ->
            Evergreen.V108.Types.Local_SetGuildNotificationLevel (p0 |> migrate_Id_Id)
                (p1 |> migrate_User_NotificationLevel)

        Evergreen.V104.Types.Local_SetNotificationMode p0 ->
            Evergreen.V108.Types.Local_SetNotificationMode (p0 |> migrate_UserSession_NotificationMode)

        Evergreen.V104.Types.Local_RegisterPushSubscription p0 ->
            Evergreen.V108.Types.Local_RegisterPushSubscription (p0 |> migrate_UserSession_SubscribeData)


migrate_Types_LocalMsg : Evergreen.V104.Types.LocalMsg -> Evergreen.V108.Types.LocalMsg
migrate_Types_LocalMsg old =
    case old of
        Evergreen.V104.Types.LocalChange p0 p1 ->
            Evergreen.V108.Types.LocalChange (p0 |> migrate_Id_Id)
                (p1 |> migrate_Types_LocalChange)

        Evergreen.V104.Types.ServerChange p0 ->
            Evergreen.V108.Types.ServerChange (p0 |> migrate_Types_ServerChange)


migrate_Types_LoggedIn2 : Evergreen.V104.Types.LoggedIn2 -> Evergreen.V108.Types.LoggedIn2
migrate_Types_LoggedIn2 old =
    { localState = old.localState |> migrate_Local_Local migrate_Types_LocalMsg migrate_LocalState_LocalState
    , admin = old.admin |> Maybe.map migrate_Pages_Admin_Model
    , drafts = old.drafts |> SeqDict.toList |> List.map (Tuple.mapFirst migrate_Id_GuildOrDmId) |> SeqDict.fromList
    , newChannelForm = old.newChannelForm |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_Types_NewChannelForm) |> SeqDict.fromList
    , editChannelForm = old.editChannelForm |> SeqDict.toList |> List.map (Tuple.mapBoth (Tuple.mapBoth migrate_Id_Id migrate_Id_Id) migrate_Types_NewChannelForm) |> SeqDict.fromList
    , newGuildForm = old.newGuildForm
    , channelNameHover = old.channelNameHover |> Maybe.map (\( t1, t2, t3 ) -> ( t1 |> migrate_Id_Id, t2 |> migrate_Id_Id, t3 |> migrate_Id_ThreadRoute ))
    , typingDebouncer = old.typingDebouncer
    , pingUser = old.pingUser |> Maybe.map migrate_MessageInput_MentionUserDropdown
    , messageHover = old.messageHover |> migrate_Types_MessageHover
    , showEmojiSelector = old.showEmojiSelector |> migrate_Types_EmojiSelector
    , editMessage = old.editMessage |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_GuildOrDmId migrate_Types_EditMessage) |> SeqDict.fromList
    , replyTo = old.replyTo |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_GuildOrDmId migrate_Id_Id) |> SeqDict.fromList
    , revealedSpoilers = old.revealedSpoilers |> Maybe.map migrate_Types_RevealedSpoilers
    , sidebarMode = old.sidebarMode |> migrate_Types_ChannelSidebarMode
    , userOptions = old.userOptions |> Maybe.map migrate_Types_UserOptionsModel
    , twoFactor = old.twoFactor |> migrate_TwoFactorAuthentication_TwoFactorState
    , filesToUpload = old.filesToUpload |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_GuildOrDmId (migrate_NonemptyDict_NonemptyDict migrate_Id_Id migrate_FileStatus_FileStatus)) |> SeqDict.fromList
    , showFileToUploadInfo = old.showFileToUploadInfo |> Maybe.map migrate_FileStatus_FileDataWithImage
    , isReloading = old.isReloading
    , channelScrollPosition = old.channelScrollPosition |> migrate_Types_ScrollPosition
    }


migrate_Types_LoginData : Evergreen.V104.Types.LoginData -> Evergreen.V108.Types.LoginData
migrate_Types_LoginData old =
    { session = old.session |> migrate_UserSession_UserSession
    , adminData = old.adminData |> migrate_Types_AdminStatusLoginData
    , twoFactorAuthenticationEnabled = old.twoFactorAuthenticationEnabled
    , guilds = old.guilds |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_LocalState_FrontendGuild) |> SeqDict.fromList
    , dmChannels = old.dmChannels |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_DmChannel_FrontendDmChannel) |> SeqDict.fromList
    , user = old.user |> migrate_User_BackendUser
    , otherUsers = old.otherUsers |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_User_FrontendUser) |> SeqDict.fromList
    , otherSessions = old.otherSessions |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_SessionIdHash_SessionIdHash migrate_UserSession_FrontendUserSession) |> SeqDict.fromList
    , publicVapidKey = old.publicVapidKey
    }


migrate_Types_LoginStatus : Evergreen.V104.Types.LoginStatus -> Evergreen.V108.Types.LoginStatus
migrate_Types_LoginStatus old =
    case old of
        Evergreen.V104.Types.LoggedIn p0 ->
            Evergreen.V108.Types.LoggedIn (p0 |> migrate_Types_LoggedIn2)

        Evergreen.V104.Types.NotLoggedIn p0 ->
            Evergreen.V108.Types.NotLoggedIn
                { loginForm = p0.loginForm |> Maybe.map migrate_LoginForm_LoginForm
                , useInviteAfterLoggedIn = p0.useInviteAfterLoggedIn |> Maybe.map migrate_SecretId_SecretId
                }


migrate_Types_MessageHover : Evergreen.V104.Types.MessageHover -> Evergreen.V108.Types.MessageHover
migrate_Types_MessageHover old =
    case old of
        Evergreen.V104.Types.NoMessageHover ->
            Evergreen.V108.Types.NoMessageHover

        Evergreen.V104.Types.MessageHover p0 p1 ->
            Evergreen.V108.Types.MessageHover (p0 |> migrate_Id_GuildOrDmIdNoThread)
                (p1 |> migrate_Id_ThreadRouteWithMessage)

        Evergreen.V104.Types.MessageMenu p0 ->
            Evergreen.V108.Types.MessageMenu (p0 |> migrate_Types_MessageMenuExtraOptions)


migrate_Types_MessageHoverMobileMode : Evergreen.V104.Types.MessageHoverMobileMode -> Evergreen.V108.Types.MessageHoverMobileMode
migrate_Types_MessageHoverMobileMode old =
    case old of
        Evergreen.V104.Types.MessageMenuClosing p0 p1 ->
            Evergreen.V108.Types.MessageMenuClosing (p0 |> migrate_Quantity_Quantity)
                (p1 |> Maybe.map migrate_Types_EditMessage)

        Evergreen.V104.Types.MessageMenuOpening p0 ->
            Evergreen.V108.Types.MessageMenuOpening
                { offset = p0.offset |> migrate_Quantity_Quantity
                , targetOffset = p0.targetOffset |> migrate_Quantity_Quantity
                }

        Evergreen.V104.Types.MessageMenuDragging p0 ->
            Evergreen.V108.Types.MessageMenuDragging
                { offset = p0.offset |> migrate_Quantity_Quantity
                , previousOffset = p0.previousOffset |> migrate_Quantity_Quantity
                , time = p0.time
                }

        Evergreen.V104.Types.MessageMenuFixed p0 ->
            Evergreen.V108.Types.MessageMenuFixed (p0 |> migrate_Quantity_Quantity)


migrate_Types_MessageMenuExtraOptions : Evergreen.V104.Types.MessageMenuExtraOptions -> Evergreen.V108.Types.MessageMenuExtraOptions
migrate_Types_MessageMenuExtraOptions old =
    { position = old.position |> migrate_Coord_Coord migrate_CssPixels_CssPixels
    , guildOrDmId = old.guildOrDmId |> migrate_Id_GuildOrDmIdNoThread
    , isThreadStarter = old.isThreadStarter
    , threadRoute = old.threadRoute |> migrate_Id_ThreadRouteWithMessage
    , mobileMode = old.mobileMode |> migrate_Types_MessageHoverMobileMode
    }


migrate_Types_NewChannelForm : Evergreen.V104.Types.NewChannelForm -> Evergreen.V108.Types.NewChannelForm
migrate_Types_NewChannelForm old =
    old


migrate_Types_NewGuildForm : Evergreen.V104.Types.NewGuildForm -> Evergreen.V108.Types.NewGuildForm
migrate_Types_NewGuildForm old =
    old


migrate_Types_RevealedSpoilers : Evergreen.V104.Types.RevealedSpoilers -> Evergreen.V108.Types.RevealedSpoilers
migrate_Types_RevealedSpoilers old =
    { guildOrDmId = old.guildOrDmId |> migrate_Id_GuildOrDmId
    , messages = old.messages |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id (migrate_NonemptySet_NonemptySet identity)) |> SeqDict.fromList
    , threadMessages = old.threadMessages |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id (\a -> SeqDict.toList a |> List.map (Tuple.mapBoth migrate_Id_Id (migrate_NonemptySet_NonemptySet identity)) |> SeqDict.fromList)) |> SeqDict.fromList
    }


migrate_Types_ScrollPosition : Evergreen.V104.Types.ScrollPosition -> Evergreen.V108.Types.ScrollPosition
migrate_Types_ScrollPosition old =
    case old of
        Evergreen.V104.Types.ScrolledToBottom ->
            Evergreen.V108.Types.ScrolledToBottom

        Evergreen.V104.Types.ScrolledToTop ->
            Evergreen.V108.Types.ScrolledToTop

        Evergreen.V104.Types.ScrolledToMiddle ->
            Evergreen.V108.Types.ScrolledToMiddle


migrate_Types_ServerChange : Evergreen.V104.Types.ServerChange -> Evergreen.V108.Types.ServerChange
migrate_Types_ServerChange old =
    case old of
        Evergreen.V104.Types.Server_SendMessage p0 p1 p2 p3 p4 p5 ->
            Evergreen.V108.Types.Server_SendMessage (p0 |> migrate_Id_Id)
                p1
                (p2 |> migrate_Id_GuildOrDmIdNoThread)
                (p3 |> migrate_List_Nonempty_Nonempty migrate_RichText_RichText)
                (p4 |> migrate_Id_ThreadRouteWithMaybeMessage)
                (p5 |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_FileStatus_FileData) |> SeqDict.fromList)

        Evergreen.V104.Types.Server_NewChannel p0 p1 p2 ->
            Evergreen.V108.Types.Server_NewChannel p0
                (p1 |> migrate_Id_Id)
                (p2 |> migrate_ChannelName_ChannelName)

        Evergreen.V104.Types.Server_EditChannel p0 p1 p2 ->
            Evergreen.V108.Types.Server_EditChannel (p0 |> migrate_Id_Id)
                (p1 |> migrate_Id_Id)
                (p2 |> migrate_ChannelName_ChannelName)

        Evergreen.V104.Types.Server_DeleteChannel p0 p1 ->
            Evergreen.V108.Types.Server_DeleteChannel (p0 |> migrate_Id_Id) (p1 |> migrate_Id_Id)

        Evergreen.V104.Types.Server_NewInviteLink p0 p1 p2 p3 ->
            Evergreen.V108.Types.Server_NewInviteLink p0
                (p1 |> migrate_Id_Id)
                (p2 |> migrate_Id_Id)
                (p3 |> migrate_SecretId_SecretId)

        Evergreen.V104.Types.Server_MemberJoined p0 p1 p2 p3 ->
            Evergreen.V108.Types.Server_MemberJoined p0
                (p1 |> migrate_Id_Id)
                (p2 |> migrate_Id_Id)
                (p3 |> migrate_User_FrontendUser)

        Evergreen.V104.Types.Server_YouJoinedGuildByInvite p0 ->
            Evergreen.V108.Types.Server_YouJoinedGuildByInvite
                (p0
                    |> Result.mapError migrate_LocalState_JoinGuildError
                    >> Result.map
                        (\rec1 ->
                            { guildId = rec1.guildId |> migrate_Id_Id
                            , guild = rec1.guild |> migrate_LocalState_FrontendGuild
                            , owner = rec1.owner |> migrate_User_FrontendUser
                            , members = rec1.members |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_User_FrontendUser) |> SeqDict.fromList
                            }
                        )
                )

        Evergreen.V104.Types.Server_MemberTyping p0 p1 p2 ->
            Evergreen.V108.Types.Server_MemberTyping p0
                (p1 |> migrate_Id_Id)
                (p2 |> migrate_Id_GuildOrDmId)

        Evergreen.V104.Types.Server_AddReactionEmoji p0 p1 p2 p3 ->
            Evergreen.V108.Types.Server_AddReactionEmoji (p0 |> migrate_Id_Id)
                (p1 |> migrate_Id_GuildOrDmIdNoThread)
                (p2 |> migrate_Id_ThreadRouteWithMessage)
                (p3 |> migrate_Emoji_Emoji)

        Evergreen.V104.Types.Server_RemoveReactionEmoji p0 p1 p2 p3 ->
            Evergreen.V108.Types.Server_RemoveReactionEmoji (p0 |> migrate_Id_Id)
                (p1 |> migrate_Id_GuildOrDmIdNoThread)
                (p2 |> migrate_Id_ThreadRouteWithMessage)
                (p3 |> migrate_Emoji_Emoji)

        Evergreen.V104.Types.Server_SendEditMessage p0 p1 p2 p3 p4 p5 ->
            Evergreen.V108.Types.Server_SendEditMessage p0
                (p1 |> migrate_Id_Id)
                (p2 |> migrate_Id_GuildOrDmIdNoThread)
                (p3 |> migrate_Id_ThreadRouteWithMessage)
                (p4 |> migrate_List_Nonempty_Nonempty migrate_RichText_RichText)
                (p5 |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_FileStatus_FileData) |> SeqDict.fromList)

        Evergreen.V104.Types.Server_MemberEditTyping p0 p1 p2 p3 ->
            Evergreen.V108.Types.Server_MemberEditTyping p0
                (p1 |> migrate_Id_Id)
                (p2 |> migrate_Id_GuildOrDmIdNoThread)
                (p3 |> migrate_Id_ThreadRouteWithMessage)

        Evergreen.V104.Types.Server_DeleteMessage p0 p1 p2 ->
            Evergreen.V108.Types.Server_DeleteMessage (p0 |> migrate_Id_Id)
                (p1 |> migrate_Id_GuildOrDmIdNoThread)
                (p2 |> migrate_Id_ThreadRouteWithMessage)

        Evergreen.V104.Types.Server_DiscordDeleteMessage p0 ->
            Evergreen.V108.Types.Server_DiscordDeleteMessage (p0 |> migrate_Types_GuildChannelAndMessageId)

        Evergreen.V104.Types.Server_SetName p0 p1 ->
            Evergreen.V108.Types.Server_SetName (p0 |> migrate_Id_Id)
                (p1 |> migrate_PersonName_PersonName)

        Evergreen.V104.Types.Server_DiscordDirectMessage p0 p1 p2 p3 ->
            Evergreen.V108.Types.Server_DiscordDirectMessage p0
                (p1 |> migrate_Id_Id)
                (p2 |> migrate_List_Nonempty_Nonempty migrate_RichText_RichText)
                (p3 |> Maybe.map migrate_Id_Id)

        Evergreen.V104.Types.Server_PushNotificationsReset p0 ->
            Evergreen.V108.Types.Server_PushNotificationsReset p0

        Evergreen.V104.Types.Server_SetGuildNotificationLevel p0 p1 ->
            Evergreen.V108.Types.Server_SetGuildNotificationLevel (p0 |> migrate_Id_Id)
                (p1 |> migrate_User_NotificationLevel)

        Evergreen.V104.Types.Server_PushNotificationFailed p0 ->
            Evergreen.V108.Types.Server_PushNotificationFailed p0

        Evergreen.V104.Types.Server_NewSession p0 p1 ->
            Evergreen.V108.Types.Server_NewSession (p0 |> migrate_SessionIdHash_SessionIdHash)
                (p1 |> migrate_UserSession_FrontendUserSession)

        Evergreen.V104.Types.Server_LoggedOut p0 ->
            Evergreen.V108.Types.Server_LoggedOut (p0 |> migrate_SessionIdHash_SessionIdHash)

        Evergreen.V104.Types.Server_CurrentlyViewing p0 p1 ->
            Evergreen.V108.Types.Server_CurrentlyViewing (p0 |> migrate_SessionIdHash_SessionIdHash)
                (p1 |> Maybe.map (Tuple.mapBoth migrate_Id_GuildOrDmIdNoThread migrate_Id_ThreadRoute))


migrate_Types_UserOptionsModel : Evergreen.V104.Types.UserOptionsModel -> Evergreen.V108.Types.UserOptionsModel
migrate_Types_UserOptionsModel old =
    { name = old.name |> migrate_Editable_Model
    , botToken = old.botToken |> migrate_Editable_Model
    , slackClientSecret = old.slackClientSecret |> migrate_Editable_Model
    , publicVapidKey = old.publicVapidKey |> migrate_Editable_Model
    , privateVapidKey = old.privateVapidKey |> migrate_Editable_Model
    , openRouterKey = old.openRouterKey |> migrate_Editable_Model
    }


migrate_Ui_Anim_Msg : Evergreen.V104.Ui.Anim.Msg -> Evergreen.V108.Ui.Anim.Msg
migrate_Ui_Anim_Msg old =
    old |> migrate_Internal_Model2_Msg


migrate_Ui_Anim_State : Evergreen.V104.Ui.Anim.State -> Evergreen.V108.Ui.Anim.State
migrate_Ui_Anim_State old =
    old |> migrate_Internal_Model2_State


migrate_UserAgent_Browser : Evergreen.V104.UserAgent.Browser -> Evergreen.V108.UserAgent.Browser
migrate_UserAgent_Browser old =
    case old of
        Evergreen.V104.UserAgent.Chrome ->
            Evergreen.V108.UserAgent.Chrome

        Evergreen.V104.UserAgent.Firefox ->
            Evergreen.V108.UserAgent.Firefox

        Evergreen.V104.UserAgent.Safari ->
            Evergreen.V108.UserAgent.Safari

        Evergreen.V104.UserAgent.Edge ->
            Evergreen.V108.UserAgent.Edge

        Evergreen.V104.UserAgent.Opera ->
            Evergreen.V108.UserAgent.Opera

        Evergreen.V104.UserAgent.UnknownBrowser ->
            Evergreen.V108.UserAgent.UnknownBrowser


migrate_UserAgent_Device : Evergreen.V104.UserAgent.Device -> Evergreen.V108.UserAgent.Device
migrate_UserAgent_Device old =
    case old of
        Evergreen.V104.UserAgent.Desktop ->
            Evergreen.V108.UserAgent.Desktop

        Evergreen.V104.UserAgent.Mobile ->
            Evergreen.V108.UserAgent.Mobile

        Evergreen.V104.UserAgent.Tablet ->
            Evergreen.V108.UserAgent.Tablet


migrate_UserAgent_UserAgent : Evergreen.V104.UserAgent.UserAgent -> Evergreen.V108.UserAgent.UserAgent
migrate_UserAgent_UserAgent old =
    { browser = old.browser |> migrate_UserAgent_Browser
    , device = old.device |> migrate_UserAgent_Device
    }


migrate_UserSession_FrontendUserSession : Evergreen.V104.UserSession.FrontendUserSession -> Evergreen.V108.UserSession.FrontendUserSession
migrate_UserSession_FrontendUserSession old =
    { notificationMode = old.notificationMode |> migrate_UserSession_NotificationMode
    , currentlyViewing = old.currentlyViewing |> Maybe.map (Tuple.mapBoth migrate_Id_GuildOrDmIdNoThread migrate_Id_ThreadRoute)
    , userAgent = old.userAgent |> migrate_UserAgent_UserAgent
    }


migrate_UserSession_NotificationMode : Evergreen.V104.UserSession.NotificationMode -> Evergreen.V108.UserSession.NotificationMode
migrate_UserSession_NotificationMode old =
    case old of
        Evergreen.V104.UserSession.NoNotifications ->
            Evergreen.V108.UserSession.NoNotifications

        Evergreen.V104.UserSession.NotifyWhenRunning ->
            Evergreen.V108.UserSession.NotifyWhenRunning

        Evergreen.V104.UserSession.PushNotifications ->
            Evergreen.V108.UserSession.PushNotifications


migrate_UserSession_PushSubscription : Evergreen.V104.UserSession.PushSubscription -> Evergreen.V108.UserSession.PushSubscription
migrate_UserSession_PushSubscription old =
    case old of
        Evergreen.V104.UserSession.NotSubscribed ->
            Evergreen.V108.UserSession.NotSubscribed

        Evergreen.V104.UserSession.Subscribed p0 ->
            Evergreen.V108.UserSession.Subscribed (p0 |> migrate_UserSession_SubscribeData)

        Evergreen.V104.UserSession.SubscriptionError p0 ->
            Evergreen.V108.UserSession.SubscriptionError p0


migrate_UserSession_SetViewing : Evergreen.V104.UserSession.SetViewing -> Evergreen.V108.UserSession.SetViewing
migrate_UserSession_SetViewing old =
    case old of
        Evergreen.V104.UserSession.ViewDm p0 p1 ->
            Evergreen.V108.UserSession.ViewDm (p0 |> migrate_Id_Id)
                (p1 |> migrate_UserSession_ToBeFilledInByBackend (\a -> SeqDict.toList a |> List.map (Tuple.mapBoth migrate_Id_Id (migrate_Message_Message migrate_Id_ChannelMessageId)) |> SeqDict.fromList))

        Evergreen.V104.UserSession.ViewDmThread p0 p1 p2 ->
            Evergreen.V108.UserSession.ViewDmThread (p0 |> migrate_Id_Id)
                (p1 |> migrate_Id_Id)
                (p2 |> migrate_UserSession_ToBeFilledInByBackend (\a -> SeqDict.toList a |> List.map (Tuple.mapBoth migrate_Id_Id (migrate_Message_Message migrate_Id_ThreadMessageId)) |> SeqDict.fromList))

        Evergreen.V104.UserSession.ViewChannel p0 p1 p2 ->
            Evergreen.V108.UserSession.ViewChannel (p0 |> migrate_Id_Id)
                (p1 |> migrate_Id_Id)
                (p2 |> migrate_UserSession_ToBeFilledInByBackend (\a -> SeqDict.toList a |> List.map (Tuple.mapBoth migrate_Id_Id (migrate_Message_Message migrate_Id_ChannelMessageId)) |> SeqDict.fromList))

        Evergreen.V104.UserSession.ViewChannelThread p0 p1 p2 p3 ->
            Evergreen.V108.UserSession.ViewChannelThread (p0 |> migrate_Id_Id)
                (p1 |> migrate_Id_Id)
                (p2 |> migrate_Id_Id)
                (p3 |> migrate_UserSession_ToBeFilledInByBackend (\a -> SeqDict.toList a |> List.map (Tuple.mapBoth migrate_Id_Id (migrate_Message_Message migrate_Id_ThreadMessageId)) |> SeqDict.fromList))

        Evergreen.V104.UserSession.StopViewingChannel ->
            Evergreen.V108.UserSession.StopViewingChannel


migrate_UserSession_SubscribeData : Evergreen.V104.UserSession.SubscribeData -> Evergreen.V108.UserSession.SubscribeData
migrate_UserSession_SubscribeData old =
    old


migrate_UserSession_ToBeFilledInByBackend : (a_old -> a_new) -> Evergreen.V104.UserSession.ToBeFilledInByBackend a_old -> Evergreen.V108.UserSession.ToBeFilledInByBackend a_new
migrate_UserSession_ToBeFilledInByBackend migrate_a old =
    case old of
        Evergreen.V104.UserSession.EmptyPlaceholder ->
            Evergreen.V108.UserSession.EmptyPlaceholder

        Evergreen.V104.UserSession.FilledInByBackend p0 ->
            Evergreen.V108.UserSession.FilledInByBackend (p0 |> migrate_a)


migrate_UserSession_UserSession : Evergreen.V104.UserSession.UserSession -> Evergreen.V108.UserSession.UserSession
migrate_UserSession_UserSession old =
    { userId = old.userId |> migrate_Id_Id
    , notificationMode = old.notificationMode |> migrate_UserSession_NotificationMode
    , pushSubscription = old.pushSubscription |> migrate_UserSession_PushSubscription
    , currentlyViewing = old.currentlyViewing |> Maybe.map (Tuple.mapBoth migrate_Id_GuildOrDmIdNoThread migrate_Id_ThreadRoute)
    , userAgent = old.userAgent |> migrate_UserAgent_UserAgent
    , sessionIdHash = old.sessionIdHash |> migrate_SessionIdHash_SessionIdHash
    }


migrate_User_AdminUiSection : Evergreen.V104.User.AdminUiSection -> Evergreen.V108.User.AdminUiSection
migrate_User_AdminUiSection old =
    case old of
        Evergreen.V104.User.UsersSection ->
            Evergreen.V108.User.UsersSection

        Evergreen.V104.User.LogSection ->
            Evergreen.V108.User.LogSection


migrate_User_BackendUser : Evergreen.V104.User.BackendUser -> Evergreen.V108.User.BackendUser
migrate_User_BackendUser old =
    { name = old.name |> migrate_PersonName_PersonName
    , isAdmin = old.isAdmin
    , email = old.email |> migrate_User_EmailStatus
    , recentLoginEmails = old.recentLoginEmails
    , lastLogPageViewed = old.lastLogPageViewed
    , expandedSections = old.expandedSections |> SeqSet.map migrate_User_AdminUiSection
    , createdAt = old.createdAt
    , emailNotifications = old.emailNotifications |> migrate_User_EmailNotifications
    , lastEmailNotification = old.lastEmailNotification
    , lastViewed = old.lastViewed |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_GuildOrDmIdNoThread migrate_Id_Id) |> SeqDict.fromList
    , lastViewedThreads = old.lastViewedThreads |> SeqDict.toList |> List.map (Tuple.mapBoth (Tuple.mapBoth migrate_Id_GuildOrDmIdNoThread migrate_Id_Id) migrate_Id_Id) |> SeqDict.fromList
    , lastDmViewed = old.lastDmViewed |> Maybe.map (Tuple.mapBoth migrate_Id_Id migrate_Id_ThreadRoute)
    , lastChannelViewed = old.lastChannelViewed |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id (Tuple.mapBoth migrate_Id_Id migrate_Id_ThreadRoute)) |> SeqDict.fromList
    , icon = old.icon |> Maybe.map migrate_FileStatus_FileHash
    , notifyOnAllMessages = old.notifyOnAllMessages |> SeqSet.map migrate_Id_Id
    , directMentions = old.directMentions |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id (migrate_NonemptyDict_NonemptyDict (Tuple.mapBoth migrate_Id_Id migrate_Id_ThreadRoute) migrate_OneOrGreater_OneOrGreater)) |> SeqDict.fromList
    , lastPushNotification = old.lastPushNotification
    }


migrate_User_EmailNotifications : Evergreen.V104.User.EmailNotifications -> Evergreen.V108.User.EmailNotifications
migrate_User_EmailNotifications old =
    case old of
        Evergreen.V104.User.CheckEvery5Minutes ->
            Evergreen.V108.User.CheckEvery5Minutes


migrate_User_EmailStatus : Evergreen.V104.User.EmailStatus -> Evergreen.V108.User.EmailStatus
migrate_User_EmailStatus old =
    case old of
        Evergreen.V104.User.RegisteredFromDiscord ->
            Evergreen.V108.User.RegisteredFromDiscord

        Evergreen.V104.User.RegisteredFromSlack ->
            Evergreen.V108.User.RegisteredFromSlack

        Evergreen.V104.User.RegisteredDirectly p0 ->
            Evergreen.V108.User.RegisteredDirectly (p0 |> migrate_EmailAddress_EmailAddress)


migrate_User_FrontendUser : Evergreen.V104.User.FrontendUser -> Evergreen.V108.User.FrontendUser
migrate_User_FrontendUser old =
    { name = old.name |> migrate_PersonName_PersonName
    , isAdmin = old.isAdmin
    , createdAt = old.createdAt
    , icon = old.icon |> Maybe.map migrate_FileStatus_FileHash
    }


migrate_User_NotificationLevel : Evergreen.V104.User.NotificationLevel -> Evergreen.V108.User.NotificationLevel
migrate_User_NotificationLevel old =
    case old of
        Evergreen.V104.User.NotifyOnEveryMessage ->
            Evergreen.V108.User.NotifyOnEveryMessage

        Evergreen.V104.User.NotifyOnMention ->
            Evergreen.V108.User.NotifyOnMention


migrate_VisibleMessages_VisibleMessages : (messageId_old -> messageId_new) -> Evergreen.V104.VisibleMessages.VisibleMessages messageId_old -> Evergreen.V108.VisibleMessages.VisibleMessages messageId_new
migrate_VisibleMessages_VisibleMessages migrate_messageId old =
    { oldest = old.oldest |> migrate_Id_Id
    , count = old.count
    }

module Evergreen.Migrate.V42 exposing (..)

{-| This migration file was automatically generated by the lamdera compiler.

It includes:

  - A migration for each of the 6 Lamdera core types that has changed
  - A function named `migrate_ModuleName_TypeName` for each changed/custom type

Expect to see:

  - `Unimplement–µd` values as placeholders wherever I was unable to figure out a clear migration path for you
  - `@NOTICE` comments for things you should know about, i.e. new custom type constructors that won't get any
    value mappings from the old type by default

You can edit this file however you wish! It won't be generated again.

See <https://dashboard.lamdera.app/docs/evergreen> for more info.

-}

import Array
import Dict
import Evergreen.V41.AiChat
import Evergreen.V41.ChannelName
import Evergreen.V41.Coord
import Evergreen.V41.CssPixels
import Evergreen.V41.Discord
import Evergreen.V41.Discord.Id
import Evergreen.V41.DmChannel
import Evergreen.V41.Editable
import Evergreen.V41.EmailAddress
import Evergreen.V41.Emoji
import Evergreen.V41.FileName
import Evergreen.V41.FileStatus
import Evergreen.V41.Geometry.Types
import Evergreen.V41.GuildName
import Evergreen.V41.Id
import Evergreen.V41.Internal.Model2
import Evergreen.V41.Local
import Evergreen.V41.LocalState
import Evergreen.V41.Log
import Evergreen.V41.LoginForm
import Evergreen.V41.Message
import Evergreen.V41.MessageInput
import Evergreen.V41.NonemptyDict
import Evergreen.V41.NonemptySet
import Evergreen.V41.OneToOne
import Evergreen.V41.Pages.Admin
import Evergreen.V41.Pagination
import Evergreen.V41.PersonName
import Evergreen.V41.Point2d
import Evergreen.V41.Ports
import Evergreen.V41.Postmark
import Evergreen.V41.RichText
import Evergreen.V41.Route
import Evergreen.V41.SecretId
import Evergreen.V41.Table
import Evergreen.V41.Touch
import Evergreen.V41.TwoFactorAuthentication
import Evergreen.V41.Types
import Evergreen.V41.Ui.Anim
import Evergreen.V41.User
import Evergreen.V42.AiChat
import Evergreen.V42.ChannelName
import Evergreen.V42.Coord
import Evergreen.V42.CssPixels
import Evergreen.V42.Discord
import Evergreen.V42.Discord.Id
import Evergreen.V42.DmChannel
import Evergreen.V42.Editable
import Evergreen.V42.EmailAddress
import Evergreen.V42.Emoji
import Evergreen.V42.FileName
import Evergreen.V42.FileStatus
import Evergreen.V42.Geometry.Types
import Evergreen.V42.GuildName
import Evergreen.V42.Id
import Evergreen.V42.Internal.Model2
import Evergreen.V42.Local
import Evergreen.V42.LocalState
import Evergreen.V42.Log
import Evergreen.V42.LoginForm
import Evergreen.V42.Message
import Evergreen.V42.MessageInput
import Evergreen.V42.NonemptyDict
import Evergreen.V42.NonemptySet
import Evergreen.V42.OneToOne
import Evergreen.V42.Pages.Admin
import Evergreen.V42.Pagination
import Evergreen.V42.PersonName
import Evergreen.V42.Point2d
import Evergreen.V42.Ports
import Evergreen.V42.Postmark
import Evergreen.V42.RichText
import Evergreen.V42.Route
import Evergreen.V42.SecretId
import Evergreen.V42.Table
import Evergreen.V42.Touch
import Evergreen.V42.TwoFactorAuthentication
import Evergreen.V42.Types
import Evergreen.V42.Ui.Anim
import Evergreen.V42.User
import Lamdera.Migrations exposing (..)
import List
import List.Nonempty
import Maybe
import Quantity
import SeqDict
import SeqSet


frontendModel : Evergreen.V41.Types.FrontendModel -> ModelMigration Evergreen.V42.Types.FrontendModel Evergreen.V42.Types.FrontendMsg
frontendModel old =
    ModelMigrated ( migrate_Types_FrontendModel old, Cmd.none )


backendModel : Evergreen.V41.Types.BackendModel -> ModelMigration Evergreen.V42.Types.BackendModel Evergreen.V42.Types.BackendMsg
backendModel old =
    ModelMigrated ( migrate_Types_BackendModel old, Cmd.none )


frontendMsg : Evergreen.V41.Types.FrontendMsg -> MsgMigration Evergreen.V42.Types.FrontendMsg Evergreen.V42.Types.FrontendMsg
frontendMsg old =
    MsgUnchanged


toBackend : Evergreen.V41.Types.ToBackend -> MsgMigration Evergreen.V42.Types.ToBackend Evergreen.V42.Types.BackendMsg
toBackend old =
    MsgUnchanged


backendMsg : Evergreen.V41.Types.BackendMsg -> MsgMigration Evergreen.V42.Types.BackendMsg Evergreen.V42.Types.BackendMsg
backendMsg old =
    MsgUnchanged


toFrontend : Evergreen.V41.Types.ToFrontend -> MsgMigration Evergreen.V42.Types.ToFrontend Evergreen.V42.Types.FrontendMsg
toFrontend old =
    MsgMigrated ( migrate_Types_ToFrontend old, Cmd.none )


migrate_Types_BackendModel : Evergreen.V41.Types.BackendModel -> Evergreen.V42.Types.BackendModel
migrate_Types_BackendModel old =
    { users = old.users |> migrate_NonemptyDict_NonemptyDict migrate_Id_Id migrate_User_BackendUser
    , sessions = old.sessions |> SeqDict.map (\k -> migrate_Id_Id)
    , connections = old.connections |> SeqDict.map (\k -> migrate_NonemptyDict_NonemptyDict identity migrate_Types_LastRequest)
    , secretCounter = old.secretCounter
    , pendingLogins = old.pendingLogins |> SeqDict.map (\k -> migrate_Types_LoginTokenData)
    , logs =
        old.logs
            |> Array.map
                (\rec ->
                    { time = rec.time
                    , log = rec.log |> migrate_Log_Log
                    }
                )
    , emailNotificationsEnabled = old.emailNotificationsEnabled
    , lastErrorLogEmail = old.lastErrorLogEmail
    , twoFactorAuthentication = old.twoFactorAuthentication |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_TwoFactorAuthentication_TwoFactorAuthentication) |> SeqDict.fromList
    , twoFactorAuthenticationSetup = old.twoFactorAuthenticationSetup |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_TwoFactorAuthentication_TwoFactorAuthenticationSetup) |> SeqDict.fromList
    , guilds = old.guilds |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_LocalState_BackendGuild) |> SeqDict.fromList
    , discordModel = old.discordModel |> migrate_Discord_Model identity
    , backendInitialized = old.backendInitialized
    , discordGuilds = old.discordGuilds |> migrate_OneToOne_OneToOne migrate_Discord_Id_Id migrate_Id_Id
    , discordUsers = old.discordUsers |> migrate_OneToOne_OneToOne migrate_Discord_Id_Id migrate_Id_Id
    , discordBotId = old.discordBotId |> Maybe.map migrate_Discord_Id_Id
    , dmChannels = old.dmChannels |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_DmChannel_DmChannelId migrate_DmChannel_DmChannel) |> SeqDict.fromList
    , discordDms = old.discordDms |> migrate_OneToOne_OneToOne migrate_Discord_Id_Id migrate_DmChannel_DmChannelId
    , botToken = old.botToken |> Maybe.map migrate_LocalState_DiscordBotToken
    , files = old.files |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_FileStatus_FileHash migrate_Types_BackendFileData) |> SeqDict.fromList
    , privateVapidKey = old.privateVapidKey |> migrate_LocalState_PrivateVapidKey
    , publicVapidKey = old.publicVapidKey
    , pushSubscriptions = old.pushSubscriptions
    }


migrate_AiChat_AiModelsStatus : Evergreen.V41.AiChat.AiModelsStatus -> Evergreen.V42.AiChat.AiModelsStatus
migrate_AiChat_AiModelsStatus old =
    case old of
        Evergreen.V41.AiChat.LoadingAiModels ->
            Evergreen.V42.AiChat.LoadingAiModels

        Evergreen.V41.AiChat.LoadedAiModels p0 ->
            Evergreen.V42.AiChat.LoadedAiModels p0

        Evergreen.V41.AiChat.LoadingFailed p0 ->
            Evergreen.V42.AiChat.LoadingFailed p0


migrate_AiChat_FrontendModel : Evergreen.V41.AiChat.FrontendModel -> Evergreen.V42.AiChat.FrontendModel
migrate_AiChat_FrontendModel old =
    { message = old.message
    , chatHistory = old.chatHistory
    , pendingResponses = old.pendingResponses |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_AiChat_ResponseId migrate_AiChat_PendingResponse) |> SeqDict.fromList
    , responseCounter = old.responseCounter
    , showOptions = old.showOptions
    , selectedModel = old.selectedModel
    , userPrefix = old.userPrefix
    , botPrefix = old.botPrefix
    , debounceCounter = old.debounceCounter
    , sendMessageWith = old.sendMessageWith |> migrate_AiChat_SendMessageWith
    , aiModels = old.aiModels |> migrate_AiChat_AiModelsStatus
    }


migrate_AiChat_PendingResponse : Evergreen.V41.AiChat.PendingResponse -> Evergreen.V42.AiChat.PendingResponse
migrate_AiChat_PendingResponse old =
    case old of
        Evergreen.V41.AiChat.Pending ->
            Evergreen.V42.AiChat.Pending

        Evergreen.V41.AiChat.GotResponse p0 ->
            Evergreen.V42.AiChat.GotResponse p0

        Evergreen.V41.AiChat.GotError p0 ->
            Evergreen.V42.AiChat.GotError p0


migrate_AiChat_ResponseId : Evergreen.V41.AiChat.ResponseId -> Evergreen.V42.AiChat.ResponseId
migrate_AiChat_ResponseId old =
    case old of
        Evergreen.V41.AiChat.RespondId p0 ->
            Evergreen.V42.AiChat.RespondId p0


migrate_AiChat_SendMessageWith : Evergreen.V41.AiChat.SendMessageWith -> Evergreen.V42.AiChat.SendMessageWith
migrate_AiChat_SendMessageWith old =
    case old of
        Evergreen.V41.AiChat.SendWithEnter ->
            Evergreen.V42.AiChat.SendWithEnter

        Evergreen.V41.AiChat.SendWithShiftEnter ->
            Evergreen.V42.AiChat.SendWithShiftEnter


migrate_AiChat_ToFrontend : Evergreen.V41.AiChat.ToFrontend -> Evergreen.V42.AiChat.ToFrontend
migrate_AiChat_ToFrontend old =
    case old of
        Evergreen.V41.AiChat.AiMessageResponse p0 p1 ->
            Evergreen.V42.AiChat.AiMessageResponse (p0 |> migrate_AiChat_ResponseId) p1


migrate_ChannelName_ChannelName : Evergreen.V41.ChannelName.ChannelName -> Evergreen.V42.ChannelName.ChannelName
migrate_ChannelName_ChannelName old =
    case old of
        Evergreen.V41.ChannelName.ChannelName p0 ->
            Evergreen.V42.ChannelName.ChannelName p0


migrate_Coord_Coord : (units_old -> units_new) -> Evergreen.V41.Coord.Coord units_old -> Evergreen.V42.Coord.Coord units_new
migrate_Coord_Coord migrate_units old =
    old |> Tuple.mapBoth migrate_Quantity_Quantity migrate_Quantity_Quantity


migrate_CssPixels_CssPixels : Evergreen.V41.CssPixels.CssPixels -> Evergreen.V42.CssPixels.CssPixels
migrate_CssPixels_CssPixels old =
    case old of
        Evergreen.V41.CssPixels.CssPixels p0 ->
            Evergreen.V42.CssPixels.CssPixels p0


migrate_Discord_Id_Id : Evergreen.V41.Discord.Id.Id idType_old -> Evergreen.V42.Discord.Id.Id idType_new
migrate_Discord_Id_Id old =
    case old of
        Evergreen.V41.Discord.Id.Id p0 ->
            Evergreen.V42.Discord.Id.Id p0


migrate_Discord_Model : (connection_old -> connection_new) -> Evergreen.V41.Discord.Model connection_old -> Evergreen.V42.Discord.Model connection_new
migrate_Discord_Model migrate_connection old =
    { websocketHandle = Maybe.map migrate_connection old.websocketHandle
    , gatewayState = old.gatewayState |> Maybe.map (Tuple.mapBoth migrate_Discord_SessionId migrate_Discord_SequenceCounter)
    , heartbeatInterval = old.heartbeatInterval
    }


migrate_Discord_SequenceCounter : Evergreen.V41.Discord.SequenceCounter -> Evergreen.V42.Discord.SequenceCounter
migrate_Discord_SequenceCounter old =
    case old of
        Evergreen.V41.Discord.SequenceCounter p0 ->
            Evergreen.V42.Discord.SequenceCounter p0


migrate_Discord_SessionId : Evergreen.V41.Discord.SessionId -> Evergreen.V42.Discord.SessionId
migrate_Discord_SessionId old =
    case old of
        Evergreen.V41.Discord.SessionId p0 ->
            Evergreen.V42.Discord.SessionId p0


migrate_DmChannel_DmChannel : Evergreen.V41.DmChannel.DmChannel -> Evergreen.V42.DmChannel.DmChannel
migrate_DmChannel_DmChannel old =
    { messages = old.messages |> Array.map migrate_Message_Message
    , lastTypedAt = old.lastTypedAt |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id (migrate_DmChannel_LastTypedAt migrate_Id_ChannelMessageId)) |> SeqDict.fromList
    , linkedMessageIds = old.linkedMessageIds |> migrate_OneToOne_OneToOne migrate_Discord_Id_Id migrate_Id_Id
    , threads = old.threads |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_DmChannel_Thread) |> SeqDict.fromList
    , linkedThreadIds = old.linkedThreadIds |> migrate_OneToOne_OneToOne migrate_Discord_Id_Id migrate_Id_Id
    }


migrate_DmChannel_DmChannelId : Evergreen.V41.DmChannel.DmChannelId -> Evergreen.V42.DmChannel.DmChannelId
migrate_DmChannel_DmChannelId old =
    case old of
        Evergreen.V41.DmChannel.DirectMessageChannelId p0 p1 ->
            Evergreen.V42.DmChannel.DirectMessageChannelId (p0 |> migrate_Id_Id) (p1 |> migrate_Id_Id)


migrate_DmChannel_LastTypedAt : (messageId_old -> messageId_new) -> Evergreen.V41.DmChannel.LastTypedAt messageId_old -> Evergreen.V42.DmChannel.LastTypedAt messageId_new
migrate_DmChannel_LastTypedAt migrate_messageId old =
    { time = old.time
    , messageIndex = old.messageIndex |> Maybe.map migrate_Id_Id
    }


migrate_DmChannel_Thread : Evergreen.V41.DmChannel.Thread -> Evergreen.V42.DmChannel.Thread
migrate_DmChannel_Thread old =
    { messages = old.messages |> Array.map migrate_Message_Message
    , lastTypedAt = old.lastTypedAt |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id (migrate_DmChannel_LastTypedAt migrate_Id_ThreadMessageId)) |> SeqDict.fromList
    , linkedMessageIds = old.linkedMessageIds |> migrate_OneToOne_OneToOne migrate_Discord_Id_Id migrate_Id_Id
    }


migrate_Editable_Editing : Evergreen.V41.Editable.Editing -> Evergreen.V42.Editable.Editing
migrate_Editable_Editing old =
    case old of
        Evergreen.V41.Editable.NotEditing ->
            Evergreen.V42.Editable.NotEditing

        Evergreen.V41.Editable.Editing p0 ->
            Evergreen.V42.Editable.Editing p0


migrate_Editable_Model : Evergreen.V41.Editable.Model -> Evergreen.V42.Editable.Model
migrate_Editable_Model old =
    { editing = old.editing |> migrate_Editable_Editing
    , pressedSubmit = old.pressedSubmit
    , showSecret = old.showSecret
    }


migrate_EmailAddress_EmailAddress : Evergreen.V41.EmailAddress.EmailAddress -> Evergreen.V42.EmailAddress.EmailAddress
migrate_EmailAddress_EmailAddress old =
    case old of
        Evergreen.V41.EmailAddress.EmailAddress p0 ->
            Evergreen.V42.EmailAddress.EmailAddress p0


migrate_Emoji_Emoji : Evergreen.V41.Emoji.Emoji -> Evergreen.V42.Emoji.Emoji
migrate_Emoji_Emoji old =
    case old of
        Evergreen.V41.Emoji.UnicodeEmoji p0 ->
            Evergreen.V42.Emoji.UnicodeEmoji p0


migrate_FileName_FileName : Evergreen.V41.FileName.FileName -> Evergreen.V42.FileName.FileName
migrate_FileName_FileName old =
    case old of
        Evergreen.V41.FileName.FileName p0 ->
            Evergreen.V42.FileName.FileName p0


migrate_FileStatus_ContentType : Evergreen.V41.FileStatus.ContentType -> Evergreen.V42.FileStatus.ContentType
migrate_FileStatus_ContentType old =
    case old of
        Evergreen.V41.FileStatus.ContentType p0 ->
            Evergreen.V42.FileStatus.ContentType p0


migrate_FileStatus_FileData : Evergreen.V41.FileStatus.FileData -> Evergreen.V42.FileStatus.FileData
migrate_FileStatus_FileData old =
    { fileName = old.fileName |> migrate_FileName_FileName
    , fileSize = old.fileSize
    , imageSize = old.imageSize |> Maybe.map (migrate_Coord_Coord migrate_CssPixels_CssPixels)
    , contentType = old.contentType |> migrate_FileStatus_ContentType
    , fileHash = old.fileHash |> migrate_FileStatus_FileHash
    }


migrate_FileStatus_FileHash : Evergreen.V41.FileStatus.FileHash -> Evergreen.V42.FileStatus.FileHash
migrate_FileStatus_FileHash old =
    case old of
        Evergreen.V41.FileStatus.FileHash p0 ->
            Evergreen.V42.FileStatus.FileHash p0


migrate_FileStatus_FileStatus : Evergreen.V41.FileStatus.FileStatus -> Evergreen.V42.FileStatus.FileStatus
migrate_FileStatus_FileStatus old =
    case old of
        Evergreen.V41.FileStatus.FileUploading p0 p1 p2 ->
            Evergreen.V42.FileStatus.FileUploading (p0 |> migrate_FileName_FileName)
                p1
                (p2 |> migrate_FileStatus_ContentType)

        Evergreen.V41.FileStatus.FileUploaded p0 ->
            Evergreen.V42.FileStatus.FileUploaded (p0 |> migrate_FileStatus_FileData)

        Evergreen.V41.FileStatus.FileError p0 p1 p2 p3 ->
            Evergreen.V42.FileStatus.FileError (p0 |> migrate_FileName_FileName)
                p1
                (p2 |> migrate_FileStatus_ContentType)
                p3


migrate_Geometry_Types_Point2d : Evergreen.V41.Geometry.Types.Point2d units_old coordinates_old -> Evergreen.V42.Geometry.Types.Point2d units_new coordinates_new
migrate_Geometry_Types_Point2d old =
    case old of
        Evergreen.V41.Geometry.Types.Point2d p0 ->
            Evergreen.V42.Geometry.Types.Point2d p0


migrate_GuildName_GuildName : Evergreen.V41.GuildName.GuildName -> Evergreen.V42.GuildName.GuildName
migrate_GuildName_GuildName old =
    case old of
        Evergreen.V41.GuildName.GuildName p0 ->
            Evergreen.V42.GuildName.GuildName p0


migrate_Id_ChannelMessageId : Evergreen.V41.Id.ChannelMessageId -> Evergreen.V42.Id.ChannelMessageId
migrate_Id_ChannelMessageId old =
    case old of
        Evergreen.V41.Id.ChannelMessageId p0 ->
            Evergreen.V42.Id.ChannelMessageId p0


migrate_Id_GuildOrDmId : Evergreen.V41.Id.GuildOrDmId -> Evergreen.V42.Id.GuildOrDmId
migrate_Id_GuildOrDmId old =
    case old of
        Evergreen.V41.Id.GuildOrDmId_Guild p0 p1 p2 ->
            Evergreen.V42.Id.GuildOrDmId_Guild (p0 |> migrate_Id_Id)
                (p1 |> migrate_Id_Id)
                (p2 |> migrate_Id_ThreadRoute)

        Evergreen.V41.Id.GuildOrDmId_Dm p0 p1 ->
            Evergreen.V42.Id.GuildOrDmId_Dm (p0 |> migrate_Id_Id)
                (p1 |> migrate_Id_ThreadRoute)


migrate_Id_GuildOrDmIdNoThread : Evergreen.V41.Id.GuildOrDmIdNoThread -> Evergreen.V42.Id.GuildOrDmIdNoThread
migrate_Id_GuildOrDmIdNoThread old =
    case old of
        Evergreen.V41.Id.GuildOrDmId_Guild_NoThread p0 p1 ->
            Evergreen.V42.Id.GuildOrDmId_Guild_NoThread (p0 |> migrate_Id_Id) (p1 |> migrate_Id_Id)

        Evergreen.V41.Id.GuildOrDmId_Dm_NoThread p0 ->
            Evergreen.V42.Id.GuildOrDmId_Dm_NoThread (p0 |> migrate_Id_Id)


migrate_Id_Id : Evergreen.V41.Id.Id a_old -> Evergreen.V42.Id.Id a_new
migrate_Id_Id old =
    case old of
        Evergreen.V41.Id.Id p0 ->
            Evergreen.V42.Id.Id p0


migrate_Id_ThreadMessageId : Evergreen.V41.Id.ThreadMessageId -> Evergreen.V42.Id.ThreadMessageId
migrate_Id_ThreadMessageId old =
    case old of
        Evergreen.V41.Id.ThreadMessageId p0 ->
            Evergreen.V42.Id.ThreadMessageId p0


migrate_Id_ThreadRoute : Evergreen.V41.Id.ThreadRoute -> Evergreen.V42.Id.ThreadRoute
migrate_Id_ThreadRoute old =
    case old of
        Evergreen.V41.Id.NoThread ->
            Evergreen.V42.Id.NoThread

        Evergreen.V41.Id.ViewThread p0 ->
            Evergreen.V42.Id.ViewThread (p0 |> migrate_Id_Id)


migrate_Id_ThreadRouteWithMaybeMessage : Evergreen.V41.Id.ThreadRouteWithMaybeMessage -> Evergreen.V42.Id.ThreadRouteWithMaybeMessage
migrate_Id_ThreadRouteWithMaybeMessage old =
    case old of
        Evergreen.V41.Id.NoThreadWithMaybeMessage p0 ->
            Evergreen.V42.Id.NoThreadWithMaybeMessage (p0 |> Maybe.map migrate_Id_Id)

        Evergreen.V41.Id.ViewThreadWithMaybeMessage p0 p1 ->
            Evergreen.V42.Id.ViewThreadWithMaybeMessage (p0 |> migrate_Id_Id)
                (p1 |> Maybe.map migrate_Id_Id)


migrate_Id_ThreadRouteWithMessage : Evergreen.V41.Id.ThreadRouteWithMessage -> Evergreen.V42.Id.ThreadRouteWithMessage
migrate_Id_ThreadRouteWithMessage old =
    case old of
        Evergreen.V41.Id.NoThreadWithMessage p0 ->
            Evergreen.V42.Id.NoThreadWithMessage (p0 |> migrate_Id_Id)

        Evergreen.V41.Id.ViewThreadWithMessage p0 p1 ->
            Evergreen.V42.Id.ViewThreadWithMessage (p0 |> migrate_Id_Id) (p1 |> migrate_Id_Id)


migrate_Internal_Model2_State : Evergreen.V41.Internal.Model2.State -> Evergreen.V42.Internal.Model2.State
migrate_Internal_Model2_State old =
    case old of
        Evergreen.V41.Internal.Model2.State p0 ->
            Evergreen.V42.Internal.Model2.State p0


migrate_List_Nonempty_Nonempty : (a_old -> a_new) -> List.Nonempty.Nonempty a_old -> List.Nonempty.Nonempty a_new
migrate_List_Nonempty_Nonempty migrate_a old =
    old |> List.Nonempty.map migrate_a


migrate_LocalState_AdminData : Evergreen.V41.LocalState.AdminData -> Evergreen.V42.LocalState.AdminData
migrate_LocalState_AdminData old =
    { users = old.users |> migrate_NonemptyDict_NonemptyDict migrate_Id_Id migrate_User_BackendUser
    , emailNotificationsEnabled = old.emailNotificationsEnabled
    , twoFactorAuthentication = old.twoFactorAuthentication |> SeqDict.toList |> List.map (Tuple.mapFirst migrate_Id_Id) |> SeqDict.fromList
    , botToken = old.botToken |> Maybe.map migrate_LocalState_DiscordBotToken
    , privateVapidKey = old.privateVapidKey |> migrate_LocalState_PrivateVapidKey
    }


migrate_LocalState_AdminStatus : Evergreen.V41.LocalState.AdminStatus -> Evergreen.V42.LocalState.AdminStatus
migrate_LocalState_AdminStatus old =
    case old of
        Evergreen.V41.LocalState.IsAdmin p0 ->
            Evergreen.V42.LocalState.IsAdmin (p0 |> migrate_LocalState_AdminData)

        Evergreen.V41.LocalState.IsNotAdmin ->
            Evergreen.V42.LocalState.IsNotAdmin


migrate_LocalState_Archived : Evergreen.V41.LocalState.Archived -> Evergreen.V42.LocalState.Archived
migrate_LocalState_Archived old =
    { archivedAt = old.archivedAt
    , archivedBy = old.archivedBy |> migrate_Id_Id
    }


migrate_LocalState_BackendChannel : Evergreen.V41.LocalState.BackendChannel -> Evergreen.V42.LocalState.BackendChannel
migrate_LocalState_BackendChannel old =
    { createdAt = old.createdAt
    , createdBy = old.createdBy |> migrate_Id_Id
    , name = old.name |> migrate_ChannelName_ChannelName
    , messages = old.messages |> Array.map migrate_Message_Message
    , status = old.status |> migrate_LocalState_ChannelStatus
    , lastTypedAt = old.lastTypedAt |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id (migrate_DmChannel_LastTypedAt migrate_Id_ChannelMessageId)) |> SeqDict.fromList
    , linkedMessageIds = old.linkedMessageIds |> migrate_OneToOne_OneToOne migrate_Discord_Id_Id migrate_Id_Id
    , threads = old.threads |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_DmChannel_Thread) |> SeqDict.fromList
    , linkedThreadIds = old.linkedThreadIds |> migrate_OneToOne_OneToOne migrate_Discord_Id_Id migrate_Id_Id
    }


migrate_LocalState_BackendGuild : Evergreen.V41.LocalState.BackendGuild -> Evergreen.V42.LocalState.BackendGuild
migrate_LocalState_BackendGuild old =
    { createdAt = old.createdAt
    , createdBy = old.createdBy |> migrate_Id_Id
    , name = old.name |> migrate_GuildName_GuildName
    , icon = old.icon |> Maybe.map migrate_FileStatus_FileHash
    , channels = old.channels |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_LocalState_BackendChannel) |> SeqDict.fromList
    , linkedChannelIds = old.linkedChannelIds |> migrate_OneToOne_OneToOne migrate_Discord_Id_Id migrate_Id_Id
    , members = old.members |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id (\rec -> rec)) |> SeqDict.fromList
    , owner = old.owner |> migrate_Id_Id
    , invites =
        old.invites
            |> SeqDict.toList
            |> List.map
                (Tuple.mapBoth migrate_SecretId_SecretId
                    (\rec ->
                        { createdAt = rec.createdAt
                        , createdBy = rec.createdBy |> migrate_Id_Id
                        }
                    )
                )
            |> SeqDict.fromList
    }


migrate_LocalState_ChannelStatus : Evergreen.V41.LocalState.ChannelStatus -> Evergreen.V42.LocalState.ChannelStatus
migrate_LocalState_ChannelStatus old =
    case old of
        Evergreen.V41.LocalState.ChannelActive ->
            Evergreen.V42.LocalState.ChannelActive

        Evergreen.V41.LocalState.ChannelDeleted p0 ->
            Evergreen.V42.LocalState.ChannelDeleted
                { deletedAt = p0.deletedAt
                , deletedBy = p0.deletedBy |> migrate_Id_Id
                }


migrate_LocalState_DiscordBotToken : Evergreen.V41.LocalState.DiscordBotToken -> Evergreen.V42.LocalState.DiscordBotToken
migrate_LocalState_DiscordBotToken old =
    case old of
        Evergreen.V41.LocalState.DiscordBotToken p0 ->
            Evergreen.V42.LocalState.DiscordBotToken p0


migrate_LocalState_FrontendChannel : Evergreen.V41.LocalState.FrontendChannel -> Evergreen.V42.LocalState.FrontendChannel
migrate_LocalState_FrontendChannel old =
    { createdAt = old.createdAt
    , createdBy = old.createdBy |> migrate_Id_Id
    , name = old.name |> migrate_ChannelName_ChannelName
    , messages = old.messages |> Array.map migrate_Message_Message
    , isArchived = old.isArchived |> Maybe.map migrate_LocalState_Archived
    , lastTypedAt = old.lastTypedAt |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id (migrate_DmChannel_LastTypedAt migrate_Id_ChannelMessageId)) |> SeqDict.fromList
    , linkedMessageIds = old.linkedMessageIds |> migrate_OneToOne_OneToOne migrate_Discord_Id_Id migrate_Id_Id
    , threads = old.threads |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_DmChannel_Thread) |> SeqDict.fromList
    , linkedThreadIds = old.linkedThreadIds |> migrate_OneToOne_OneToOne migrate_Discord_Id_Id migrate_Id_Id
    }


migrate_LocalState_FrontendGuild : Evergreen.V41.LocalState.FrontendGuild -> Evergreen.V42.LocalState.FrontendGuild
migrate_LocalState_FrontendGuild old =
    { createdAt = old.createdAt
    , createdBy = old.createdBy |> migrate_Id_Id
    , name = old.name |> migrate_GuildName_GuildName
    , icon = old.icon |> Maybe.map migrate_FileStatus_FileHash
    , channels = old.channels |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_LocalState_FrontendChannel) |> SeqDict.fromList
    , members = old.members |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id (\rec -> rec)) |> SeqDict.fromList
    , owner = old.owner |> migrate_Id_Id
    , invites =
        old.invites
            |> SeqDict.toList
            |> List.map
                (Tuple.mapBoth migrate_SecretId_SecretId
                    (\rec ->
                        { createdAt = rec.createdAt
                        , createdBy = rec.createdBy |> migrate_Id_Id
                        }
                    )
                )
            |> SeqDict.fromList
    }


migrate_LocalState_JoinGuildError : Evergreen.V41.LocalState.JoinGuildError -> Evergreen.V42.LocalState.JoinGuildError
migrate_LocalState_JoinGuildError old =
    case old of
        Evergreen.V41.LocalState.AlreadyJoined ->
            Evergreen.V42.LocalState.AlreadyJoined

        Evergreen.V41.LocalState.InviteIsInvalid ->
            Evergreen.V42.LocalState.InviteIsInvalid


migrate_LocalState_LocalState : Evergreen.V41.LocalState.LocalState -> Evergreen.V42.LocalState.LocalState
migrate_LocalState_LocalState old =
    { adminData = old.adminData |> migrate_LocalState_AdminStatus
    , guilds = old.guilds |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_LocalState_FrontendGuild) |> SeqDict.fromList
    , dmChannels = old.dmChannels |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_DmChannel_DmChannel) |> SeqDict.fromList
    , joinGuildError = old.joinGuildError |> Maybe.map migrate_LocalState_JoinGuildError
    , localUser = old.localUser |> migrate_LocalState_LocalUser
    , publicVapidKey = old.publicVapidKey
    }


migrate_LocalState_LocalUser : Evergreen.V41.LocalState.LocalUser -> Evergreen.V42.LocalState.LocalUser
migrate_LocalState_LocalUser old =
    { userId = old.userId |> migrate_Id_Id
    , user = old.user |> migrate_User_BackendUser
    , otherUsers = old.otherUsers |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_User_FrontendUser) |> SeqDict.fromList
    , timezone = old.timezone
    }


migrate_LocalState_LogWithTime : Evergreen.V41.LocalState.LogWithTime -> Evergreen.V42.LocalState.LogWithTime
migrate_LocalState_LogWithTime old =
    { time = old.time
    , log = old.log |> migrate_Log_Log
    }


migrate_LocalState_PrivateVapidKey : Evergreen.V41.LocalState.PrivateVapidKey -> Evergreen.V42.LocalState.PrivateVapidKey
migrate_LocalState_PrivateVapidKey old =
    case old of
        Evergreen.V41.LocalState.PrivateVapidKey p0 ->
            Evergreen.V42.LocalState.PrivateVapidKey p0


migrate_Local_ChangeId : Evergreen.V41.Local.ChangeId -> Evergreen.V42.Local.ChangeId
migrate_Local_ChangeId old =
    case old of
        Evergreen.V41.Local.ChangeId p0 ->
            Evergreen.V42.Local.ChangeId p0


migrate_Local_Local : (msg_old -> msg_new) -> (model_old -> model_new) -> Evergreen.V41.Local.Local msg_old model_old -> Evergreen.V42.Local.Local msg_new model_new
migrate_Local_Local migrate_msg migrate_model old =
    case old of
        Evergreen.V41.Local.Local p0 ->
            Evergreen.V42.Local.Local
                { localMsgs =
                    p0.localMsgs
                        |> Dict.map
                            (\k ->
                                \rec1 ->
                                    { createdAt = rec1.createdAt
                                    , msg = rec1.msg |> migrate_msg
                                    }
                            )
                , localModel = p0.localModel |> migrate_model
                , serverModel = p0.serverModel |> migrate_model
                , counter = p0.counter |> migrate_Local_ChangeId
                }


migrate_Log_Log : Evergreen.V41.Log.Log -> Evergreen.V42.Log.Log
migrate_Log_Log old =
    case old of
        Evergreen.V41.Log.LoginEmail p0 p1 ->
            Evergreen.V42.Log.LoginEmail (p0 |> Result.mapError migrate_Postmark_SendEmailError)
                (p1 |> migrate_EmailAddress_EmailAddress)

        Evergreen.V41.Log.LoginsRateLimited p0 ->
            Evergreen.V42.Log.LoginsRateLimited (p0 |> migrate_Id_Id)

        Evergreen.V41.Log.ChangedUsers p0 ->
            Evergreen.V42.Log.ChangedUsers (p0 |> migrate_Id_Id)

        Evergreen.V41.Log.SendLogErrorEmailFailed p0 p1 ->
            Evergreen.V42.Log.SendLogErrorEmailFailed (p0 |> migrate_Postmark_SendEmailError)
                (p1 |> migrate_EmailAddress_EmailAddress)

        Evergreen.V41.Log.PushNotificationError p0 ->
            Evergreen.V42.Log.PushNotificationError p0


migrate_LoginForm_CodeStatus : Evergreen.V41.LoginForm.CodeStatus -> Evergreen.V42.LoginForm.CodeStatus
migrate_LoginForm_CodeStatus old =
    case old of
        Evergreen.V41.LoginForm.Checking ->
            Evergreen.V42.LoginForm.Checking

        Evergreen.V41.LoginForm.NotValid ->
            Evergreen.V42.LoginForm.NotValid


migrate_LoginForm_EnterEmail2 : Evergreen.V41.LoginForm.EnterEmail2 -> Evergreen.V42.LoginForm.EnterEmail2
migrate_LoginForm_EnterEmail2 old =
    old


migrate_LoginForm_EnterLoginCode2 : Evergreen.V41.LoginForm.EnterLoginCode2 -> Evergreen.V42.LoginForm.EnterLoginCode2
migrate_LoginForm_EnterLoginCode2 old =
    { sentTo = old.sentTo |> migrate_EmailAddress_EmailAddress
    , code = old.code
    , attempts = old.attempts |> SeqDict.map (\k -> migrate_LoginForm_CodeStatus)
    }


migrate_LoginForm_EnterTwoFactorCode2 : Evergreen.V41.LoginForm.EnterTwoFactorCode2 -> Evergreen.V42.LoginForm.EnterTwoFactorCode2
migrate_LoginForm_EnterTwoFactorCode2 old =
    { code = old.code
    , attempts = old.attempts |> SeqDict.map (\k -> migrate_LoginForm_CodeStatus)
    , attemptCount = old.attemptCount
    }


migrate_LoginForm_EnterUserData2 : Evergreen.V41.LoginForm.EnterUserData2 -> Evergreen.V42.LoginForm.EnterUserData2
migrate_LoginForm_EnterUserData2 old =
    { name = old.name
    , pressedSubmit = old.pressedSubmit |> migrate_LoginForm_SubmitStatus
    }


migrate_LoginForm_LoginForm : Evergreen.V41.LoginForm.LoginForm -> Evergreen.V42.LoginForm.LoginForm
migrate_LoginForm_LoginForm old =
    case old of
        Evergreen.V41.LoginForm.EnterEmail p0 ->
            Evergreen.V42.LoginForm.EnterEmail (p0 |> migrate_LoginForm_EnterEmail2)

        Evergreen.V41.LoginForm.EnterLoginCode p0 ->
            Evergreen.V42.LoginForm.EnterLoginCode (p0 |> migrate_LoginForm_EnterLoginCode2)

        Evergreen.V41.LoginForm.EnterTwoFactorCode p0 ->
            Evergreen.V42.LoginForm.EnterTwoFactorCode (p0 |> migrate_LoginForm_EnterTwoFactorCode2)

        Evergreen.V41.LoginForm.EnterUserData p0 ->
            Evergreen.V42.LoginForm.EnterUserData (p0 |> migrate_LoginForm_EnterUserData2)


migrate_LoginForm_SubmitStatus : Evergreen.V41.LoginForm.SubmitStatus -> Evergreen.V42.LoginForm.SubmitStatus
migrate_LoginForm_SubmitStatus old =
    case old of
        Evergreen.V41.LoginForm.NotSubmitted p0 ->
            Evergreen.V42.LoginForm.NotSubmitted p0

        Evergreen.V41.LoginForm.Submitting ->
            Evergreen.V42.LoginForm.Submitting


migrate_MessageInput_MentionUserDropdown : Evergreen.V41.MessageInput.MentionUserDropdown -> Evergreen.V42.MessageInput.MentionUserDropdown
migrate_MessageInput_MentionUserDropdown old =
    { charIndex = old.charIndex
    , dropdownIndex = old.dropdownIndex
    , inputElement =
        old.inputElement
            |> (\rec -> rec)
    , target = old.target |> migrate_MessageInput_MentionUserTarget
    }


migrate_MessageInput_MentionUserTarget : Evergreen.V41.MessageInput.MentionUserTarget -> Evergreen.V42.MessageInput.MentionUserTarget
migrate_MessageInput_MentionUserTarget old =
    case old of
        Evergreen.V41.MessageInput.NewMessage ->
            Evergreen.V42.MessageInput.NewMessage

        Evergreen.V41.MessageInput.EditMessage ->
            Evergreen.V42.MessageInput.EditMessage


migrate_Message_Message : Evergreen.V41.Message.Message -> Evergreen.V42.Message.Message
migrate_Message_Message old =
    case old of
        Evergreen.V41.Message.UserTextMessage p0 ->
            Evergreen.V42.Message.UserTextMessage (p0 |> migrate_Message_UserTextMessageData)

        Evergreen.V41.Message.UserJoinedMessage p0 p1 p2 ->
            Evergreen.V42.Message.UserJoinedMessage p0
                (p1 |> migrate_Id_Id)
                (p2 |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Emoji_Emoji (migrate_NonemptySet_NonemptySet migrate_Id_Id)) |> SeqDict.fromList)

        Evergreen.V41.Message.DeletedMessage p0 ->
            Evergreen.V42.Message.DeletedMessage p0


migrate_Message_UserTextMessageData : Evergreen.V41.Message.UserTextMessageData -> Evergreen.V42.Message.UserTextMessageData
migrate_Message_UserTextMessageData old =
    { createdAt = old.createdAt
    , createdBy = old.createdBy |> migrate_Id_Id
    , content = old.content |> migrate_List_Nonempty_Nonempty migrate_RichText_RichText
    , reactions = old.reactions |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Emoji_Emoji (migrate_NonemptySet_NonemptySet migrate_Id_Id)) |> SeqDict.fromList
    , editedAt = old.editedAt
    , repliedTo = old.repliedTo |> Maybe.map migrate_Id_Id
    , attachedFiles = old.attachedFiles |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_FileStatus_FileData) |> SeqDict.fromList
    }


migrate_NonemptyDict_NonemptyDict : (id_old -> id_new) -> (a_old -> a_new) -> Evergreen.V41.NonemptyDict.NonemptyDict id_old a_old -> Evergreen.V42.NonemptyDict.NonemptyDict id_new a_new
migrate_NonemptyDict_NonemptyDict migrate_id migrate_a old =
    case old of
        Evergreen.V41.NonemptyDict.NonemptyDict p0 p1 p2 ->
            Evergreen.V42.NonemptyDict.NonemptyDict (p0 |> migrate_id)
                (p1 |> migrate_a)
                (p2 |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_id migrate_a) |> SeqDict.fromList)


migrate_NonemptySet_NonemptySet : (a_old -> a_new) -> Evergreen.V41.NonemptySet.NonemptySet a_old -> Evergreen.V42.NonemptySet.NonemptySet a_new
migrate_NonemptySet_NonemptySet migrate_a old =
    case old of
        Evergreen.V41.NonemptySet.NonemptySet p0 p1 ->
            Evergreen.V42.NonemptySet.NonemptySet (p0 |> migrate_a) (p1 |> SeqSet.map migrate_a)


migrate_OneToOne_OneToOne : (a_old -> a_new) -> (b_old -> b_new) -> Evergreen.V41.OneToOne.OneToOne a_old b_old -> Evergreen.V42.OneToOne.OneToOne a_new b_new
migrate_OneToOne_OneToOne migrate_a migrate_b old =
    case old of
        Evergreen.V41.OneToOne.OneToOne p0 p1 ->
            Evergreen.V42.OneToOne.OneToOne (p0 |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_a migrate_b) |> SeqDict.fromList)
                (p1 |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_b migrate_a) |> SeqDict.fromList)


migrate_Pages_Admin_AdminChange : Evergreen.V41.Pages.Admin.AdminChange -> Evergreen.V42.Pages.Admin.AdminChange
migrate_Pages_Admin_AdminChange old =
    case old of
        Evergreen.V41.Pages.Admin.ChangeUsers p0 ->
            Evergreen.V42.Pages.Admin.ChangeUsers
                { time = p0.time
                , changedUsers = p0.changedUsers |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_Pages_Admin_EditedBackendUser) |> SeqDict.fromList
                , newUsers = p0.newUsers
                , deletedUsers = p0.deletedUsers |> SeqSet.map migrate_Id_Id
                }

        Evergreen.V41.Pages.Admin.ExpandSection p0 ->
            Evergreen.V42.Pages.Admin.ExpandSection (p0 |> migrate_User_AdminUiSection)

        Evergreen.V41.Pages.Admin.CollapseSection p0 ->
            Evergreen.V42.Pages.Admin.CollapseSection (p0 |> migrate_User_AdminUiSection)

        Evergreen.V41.Pages.Admin.LogPageChanged p0 ->
            Evergreen.V42.Pages.Admin.LogPageChanged p0

        Evergreen.V41.Pages.Admin.SetEmailNotificationsEnabled p0 ->
            Evergreen.V42.Pages.Admin.SetEmailNotificationsEnabled p0

        Evergreen.V41.Pages.Admin.SetDiscordBotToken p0 ->
            Evergreen.V42.Pages.Admin.SetDiscordBotToken (p0 |> Maybe.map migrate_LocalState_DiscordBotToken)

        Evergreen.V41.Pages.Admin.SetPrivateVapidKey p0 ->
            Evergreen.V42.Pages.Admin.SetPrivateVapidKey (p0 |> migrate_LocalState_PrivateVapidKey)

        Evergreen.V41.Pages.Admin.SetPublicVapidKey p0 ->
            Evergreen.V42.Pages.Admin.SetPublicVapidKey p0


migrate_Pages_Admin_EditedBackendUser : Evergreen.V41.Pages.Admin.EditedBackendUser -> Evergreen.V42.Pages.Admin.EditedBackendUser
migrate_Pages_Admin_EditedBackendUser old =
    old


migrate_Pages_Admin_EditingCell : Evergreen.V41.Pages.Admin.EditingCell -> Evergreen.V42.Pages.Admin.EditingCell
migrate_Pages_Admin_EditingCell old =
    { userId = old.userId |> migrate_Pages_Admin_UserTableId
    , column = old.column |> migrate_Pages_Admin_UserColumn
    , text = old.text
    }


migrate_Pages_Admin_InitAdminData : Evergreen.V41.Pages.Admin.InitAdminData -> Evergreen.V42.Pages.Admin.InitAdminData
migrate_Pages_Admin_InitAdminData old =
    { lastLogPageViewed = old.lastLogPageViewed
    , users = old.users |> migrate_NonemptyDict_NonemptyDict migrate_Id_Id migrate_User_BackendUser
    , emailNotificationsEnabled = old.emailNotificationsEnabled
    , twoFactorAuthentication = old.twoFactorAuthentication |> SeqDict.toList |> List.map (Tuple.mapFirst migrate_Id_Id) |> SeqDict.fromList
    , botToken = old.botToken |> Maybe.map migrate_LocalState_DiscordBotToken
    , privateVapidKey = old.privateVapidKey |> migrate_LocalState_PrivateVapidKey
    }


migrate_Pages_Admin_Model : Evergreen.V41.Pages.Admin.Model -> Evergreen.V42.Pages.Admin.Model
migrate_Pages_Admin_Model old =
    { highlightLog = old.highlightLog
    , copiedLogLink = old.copiedLogLink
    , userTable = old.userTable |> migrate_Pages_Admin_UserTable
    , submitError = old.submitError |> Maybe.map migrate_Pages_Admin_UsersChangeError
    , logs = old.logs |> migrate_Pagination_Pagination migrate_LocalState_LogWithTime
    }


migrate_Pages_Admin_ToFrontend : Evergreen.V41.Pages.Admin.ToFrontend -> Evergreen.V42.Pages.Admin.ToFrontend
migrate_Pages_Admin_ToFrontend old =
    case old of
        Evergreen.V41.Pages.Admin.LogPaginationToFrontend p0 ->
            Evergreen.V42.Pages.Admin.LogPaginationToFrontend (p0 |> migrate_Pagination_ToFrontend migrate_LocalState_LogWithTime)


migrate_Pages_Admin_UserColumn : Evergreen.V41.Pages.Admin.UserColumn -> Evergreen.V42.Pages.Admin.UserColumn
migrate_Pages_Admin_UserColumn old =
    case old of
        Evergreen.V41.Pages.Admin.NameColumn ->
            Evergreen.V42.Pages.Admin.NameColumn

        Evergreen.V41.Pages.Admin.EmailAddressColumn ->
            Evergreen.V42.Pages.Admin.EmailAddressColumn


migrate_Pages_Admin_UserTable : Evergreen.V41.Pages.Admin.UserTable -> Evergreen.V42.Pages.Admin.UserTable
migrate_Pages_Admin_UserTable old =
    { table = old.table |> migrate_Table_Model
    , changedUsers = old.changedUsers |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_Pages_Admin_EditedBackendUser) |> SeqDict.fromList
    , editingCell = old.editingCell |> Maybe.map migrate_Pages_Admin_EditingCell
    , newUsers = old.newUsers
    , deletedUsers = old.deletedUsers |> SeqSet.map migrate_Id_Id
    }


migrate_Pages_Admin_UserTableId : Evergreen.V41.Pages.Admin.UserTableId -> Evergreen.V42.Pages.Admin.UserTableId
migrate_Pages_Admin_UserTableId old =
    case old of
        Evergreen.V41.Pages.Admin.ExistingUserId p0 ->
            Evergreen.V42.Pages.Admin.ExistingUserId (p0 |> migrate_Id_Id)

        Evergreen.V41.Pages.Admin.NewUserId p0 ->
            Evergreen.V42.Pages.Admin.NewUserId p0


migrate_Pages_Admin_UsersChangeError : Evergreen.V41.Pages.Admin.UsersChangeError -> Evergreen.V42.Pages.Admin.UsersChangeError
migrate_Pages_Admin_UsersChangeError old =
    case old of
        Evergreen.V41.Pages.Admin.EmailAddressesAreNotUnique ->
            Evergreen.V42.Pages.Admin.EmailAddressesAreNotUnique

        Evergreen.V41.Pages.Admin.InvalidChangesToUser ->
            Evergreen.V42.Pages.Admin.InvalidChangesToUser

        Evergreen.V41.Pages.Admin.ChangesAppliedToNonExistentUser p0 ->
            Evergreen.V42.Pages.Admin.ChangesAppliedToNonExistentUser (p0 |> migrate_Id_Id)

        Evergreen.V41.Pages.Admin.CantRemoveAdminRoleFromYourself ->
            Evergreen.V42.Pages.Admin.CantRemoveAdminRoleFromYourself

        Evergreen.V41.Pages.Admin.CantDeleteYourself ->
            Evergreen.V42.Pages.Admin.CantDeleteYourself

        Evergreen.V41.Pages.Admin.InvalidNewUser ->
            Evergreen.V42.Pages.Admin.InvalidNewUser


migrate_Pagination_PageStatus : (a_old -> a_new) -> Evergreen.V41.Pagination.PageStatus a_old -> Evergreen.V42.Pagination.PageStatus a_new
migrate_Pagination_PageStatus migrate_a old =
    case old of
        Evergreen.V41.Pagination.PageLoading ->
            Evergreen.V42.Pagination.PageLoading

        Evergreen.V41.Pagination.PageLoaded p0 ->
            Evergreen.V42.Pagination.PageLoaded (p0 |> Array.map migrate_a)


migrate_Pagination_Pagination : (a_old -> a_new) -> Evergreen.V41.Pagination.Pagination a_old -> Evergreen.V42.Pagination.Pagination a_new
migrate_Pagination_Pagination migrate_a old =
    { pages = old.pages |> Dict.map (\k -> migrate_Pagination_PageStatus migrate_a)
    , currentPage = old.currentPage
    , totalPages = old.totalPages
    }


migrate_Pagination_ToFrontend : (a_old -> a_new) -> Evergreen.V41.Pagination.ToFrontend a_old -> Evergreen.V42.Pagination.ToFrontend a_new
migrate_Pagination_ToFrontend migrate_a old =
    case old of
        Evergreen.V41.Pagination.PageResponse p0 ->
            Evergreen.V42.Pagination.PageResponse
                { pageIndex = p0.pageIndex
                , totalPages = p0.totalPages
                , pageData = p0.pageData |> Array.map migrate_a
                }


migrate_PersonName_PersonName : Evergreen.V41.PersonName.PersonName -> Evergreen.V42.PersonName.PersonName
migrate_PersonName_PersonName old =
    case old of
        Evergreen.V41.PersonName.PersonName p0 ->
            Evergreen.V42.PersonName.PersonName p0


migrate_Point2d_Point2d : (units_old -> units_new) -> (coordinates_old -> coordinates_new) -> Evergreen.V41.Point2d.Point2d units_old coordinates_old -> Evergreen.V42.Point2d.Point2d units_new coordinates_new
migrate_Point2d_Point2d migrate_units migrate_coordinates old =
    old |> migrate_Geometry_Types_Point2d


migrate_Ports_NotificationPermission : Evergreen.V41.Ports.NotificationPermission -> Evergreen.V42.Ports.NotificationPermission
migrate_Ports_NotificationPermission old =
    case old of
        Evergreen.V41.Ports.NotAsked ->
            Evergreen.V42.Ports.NotAsked

        Evergreen.V41.Ports.Denied ->
            Evergreen.V42.Ports.Denied

        Evergreen.V41.Ports.Granted ->
            Evergreen.V42.Ports.Granted

        Evergreen.V41.Ports.Unsupported ->
            Evergreen.V42.Ports.Unsupported


migrate_Ports_PwaStatus : Evergreen.V41.Ports.PwaStatus -> Evergreen.V42.Ports.PwaStatus
migrate_Ports_PwaStatus old =
    case old of
        Evergreen.V41.Ports.InstalledPwa ->
            Evergreen.V42.Ports.InstalledPwa

        Evergreen.V41.Ports.BrowserView ->
            Evergreen.V42.Ports.BrowserView


migrate_Postmark_PostmarkSendResponse : Evergreen.V41.Postmark.PostmarkSendResponse -> Evergreen.V42.Postmark.PostmarkSendResponse
migrate_Postmark_PostmarkSendResponse old =
    { errorCode = old.errorCode
    , message = old.message
    , to = old.to |> List.map migrate_EmailAddress_EmailAddress
    }


migrate_Postmark_SendEmailError : Evergreen.V41.Postmark.SendEmailError -> Evergreen.V42.Postmark.SendEmailError
migrate_Postmark_SendEmailError old =
    case old of
        Evergreen.V41.Postmark.UnknownError p0 ->
            Evergreen.V42.Postmark.UnknownError p0

        Evergreen.V41.Postmark.PostmarkError p0 ->
            Evergreen.V42.Postmark.PostmarkError (p0 |> migrate_Postmark_PostmarkSendResponse)

        Evergreen.V41.Postmark.NetworkError ->
            Evergreen.V42.Postmark.NetworkError

        Evergreen.V41.Postmark.Timeout ->
            Evergreen.V42.Postmark.Timeout

        Evergreen.V41.Postmark.BadUrl p0 ->
            Evergreen.V42.Postmark.BadUrl p0


migrate_Quantity_Quantity : Quantity.Quantity number units -> Quantity.Quantity number units2
migrate_Quantity_Quantity old =
    Quantity.unwrap old |> Quantity.unsafe


migrate_RichText_Language : Evergreen.V41.RichText.Language -> Evergreen.V42.RichText.Language
migrate_RichText_Language old =
    case old of
        Evergreen.V41.RichText.Language p0 ->
            Evergreen.V42.RichText.Language p0

        Evergreen.V41.RichText.NoLanguage ->
            Evergreen.V42.RichText.NoLanguage


migrate_RichText_RichText : Evergreen.V41.RichText.RichText -> Evergreen.V42.RichText.RichText
migrate_RichText_RichText old =
    case old of
        Evergreen.V41.RichText.UserMention p0 ->
            Evergreen.V42.RichText.UserMention (p0 |> migrate_Id_Id)

        Evergreen.V41.RichText.NormalText p0 p1 ->
            Evergreen.V42.RichText.NormalText p0 p1

        Evergreen.V41.RichText.Bold p0 ->
            Evergreen.V42.RichText.Bold (p0 |> migrate_List_Nonempty_Nonempty migrate_RichText_RichText)

        Evergreen.V41.RichText.Italic p0 ->
            Evergreen.V42.RichText.Italic (p0 |> migrate_List_Nonempty_Nonempty migrate_RichText_RichText)

        Evergreen.V41.RichText.Underline p0 ->
            Evergreen.V42.RichText.Underline (p0 |> migrate_List_Nonempty_Nonempty migrate_RichText_RichText)

        Evergreen.V41.RichText.Strikethrough p0 ->
            Evergreen.V42.RichText.Strikethrough (p0 |> migrate_List_Nonempty_Nonempty migrate_RichText_RichText)

        Evergreen.V41.RichText.Spoiler p0 ->
            Evergreen.V42.RichText.Spoiler (p0 |> migrate_List_Nonempty_Nonempty migrate_RichText_RichText)

        Evergreen.V41.RichText.Hyperlink p0 p1 ->
            Evergreen.V42.RichText.Hyperlink p0 p1

        Evergreen.V41.RichText.InlineCode p0 p1 ->
            Evergreen.V42.RichText.InlineCode p0 p1

        Evergreen.V41.RichText.CodeBlock p0 p1 ->
            Evergreen.V42.RichText.CodeBlock (p0 |> migrate_RichText_Language) p1

        Evergreen.V41.RichText.AttachedFile p0 ->
            Evergreen.V42.RichText.AttachedFile (p0 |> migrate_Id_Id)


migrate_Route_ChannelRoute : Evergreen.V41.Route.ChannelRoute -> Evergreen.V42.Route.ChannelRoute
migrate_Route_ChannelRoute old =
    case old of
        Evergreen.V41.Route.ChannelRoute p0 p1 ->
            Evergreen.V42.Route.ChannelRoute (p0 |> migrate_Id_Id)
                (p1 |> migrate_Id_ThreadRouteWithMaybeMessage)

        Evergreen.V41.Route.NewChannelRoute ->
            Evergreen.V42.Route.NewChannelRoute

        Evergreen.V41.Route.EditChannelRoute p0 ->
            Evergreen.V42.Route.EditChannelRoute (p0 |> migrate_Id_Id)

        Evergreen.V41.Route.InviteLinkCreatorRoute ->
            Evergreen.V42.Route.InviteLinkCreatorRoute

        Evergreen.V41.Route.JoinRoute p0 ->
            Evergreen.V42.Route.JoinRoute (p0 |> migrate_SecretId_SecretId)


migrate_Route_Route : Evergreen.V41.Route.Route -> Evergreen.V42.Route.Route
migrate_Route_Route old =
    case old of
        Evergreen.V41.Route.HomePageRoute ->
            Evergreen.V42.Route.HomePageRoute

        Evergreen.V41.Route.AdminRoute p0 ->
            Evergreen.V42.Route.AdminRoute p0

        Evergreen.V41.Route.GuildRoute p0 p1 ->
            Evergreen.V42.Route.GuildRoute (p0 |> migrate_Id_Id)
                (p1 |> migrate_Route_ChannelRoute)

        Evergreen.V41.Route.DmRoute p0 p1 ->
            Evergreen.V42.Route.DmRoute (p0 |> migrate_Id_Id)
                (p1 |> migrate_Id_ThreadRouteWithMaybeMessage)

        Evergreen.V41.Route.AiChatRoute ->
            Evergreen.V42.Route.AiChatRoute


migrate_SecretId_SecretId : Evergreen.V41.SecretId.SecretId a_old -> Evergreen.V42.SecretId.SecretId a_new
migrate_SecretId_SecretId old =
    case old of
        Evergreen.V41.SecretId.SecretId p0 ->
            Evergreen.V42.SecretId.SecretId p0


migrate_Table_Model : Evergreen.V41.Table.Model -> Evergreen.V42.Table.Model
migrate_Table_Model old =
    old


migrate_Touch_ScreenCoordinate : Evergreen.V41.Touch.ScreenCoordinate -> Evergreen.V42.Touch.ScreenCoordinate
migrate_Touch_ScreenCoordinate old =
    case old of
        Evergreen.V41.Touch.ScreenCoordinate p0 ->
            Evergreen.V42.Touch.ScreenCoordinate p0


migrate_Touch_Touch : Evergreen.V41.Touch.Touch -> Evergreen.V42.Touch.Touch
migrate_Touch_Touch old =
    { client = old.client |> migrate_Point2d_Point2d migrate_CssPixels_CssPixels migrate_Touch_ScreenCoordinate
    , target = old.target
    }


migrate_TwoFactorAuthentication_ToFrontend : Evergreen.V41.TwoFactorAuthentication.ToFrontend -> Evergreen.V42.TwoFactorAuthentication.ToFrontend
migrate_TwoFactorAuthentication_ToFrontend old =
    case old of
        Evergreen.V41.TwoFactorAuthentication.EnableTwoFactorAuthenticationResponse p0 ->
            Evergreen.V42.TwoFactorAuthentication.EnableTwoFactorAuthenticationResponse p0

        Evergreen.V41.TwoFactorAuthentication.ConfirmTwoFactorAuthenticationResponse p0 p1 ->
            Evergreen.V42.TwoFactorAuthentication.ConfirmTwoFactorAuthenticationResponse p0 p1


migrate_TwoFactorAuthentication_TwoFactorAuthentication : Evergreen.V41.TwoFactorAuthentication.TwoFactorAuthentication -> Evergreen.V42.TwoFactorAuthentication.TwoFactorAuthentication
migrate_TwoFactorAuthentication_TwoFactorAuthentication old =
    { secret = old.secret |> migrate_SecretId_SecretId
    , finishedAt = old.finishedAt
    }


migrate_TwoFactorAuthentication_TwoFactorAuthenticationSetup : Evergreen.V41.TwoFactorAuthentication.TwoFactorAuthenticationSetup -> Evergreen.V42.TwoFactorAuthentication.TwoFactorAuthenticationSetup
migrate_TwoFactorAuthentication_TwoFactorAuthenticationSetup old =
    { secret = old.secret |> migrate_SecretId_SecretId
    , startedAt = old.startedAt
    }


migrate_TwoFactorAuthentication_TwoFactorSetupData : Evergreen.V41.TwoFactorAuthentication.TwoFactorSetupData -> Evergreen.V42.TwoFactorAuthentication.TwoFactorSetupData
migrate_TwoFactorAuthentication_TwoFactorSetupData old =
    { qrCodeUrl = old.qrCodeUrl
    , code = old.code
    , attempts = old.attempts |> SeqDict.map (\k -> migrate_LoginForm_CodeStatus)
    }


migrate_TwoFactorAuthentication_TwoFactorState : Evergreen.V41.TwoFactorAuthentication.TwoFactorState -> Evergreen.V42.TwoFactorAuthentication.TwoFactorState
migrate_TwoFactorAuthentication_TwoFactorState old =
    case old of
        Evergreen.V41.TwoFactorAuthentication.TwoFactorNotStarted ->
            Evergreen.V42.TwoFactorAuthentication.TwoFactorNotStarted

        Evergreen.V41.TwoFactorAuthentication.TwoFactorLoading ->
            Evergreen.V42.TwoFactorAuthentication.TwoFactorLoading

        Evergreen.V41.TwoFactorAuthentication.TwoFactorSetup p0 ->
            Evergreen.V42.TwoFactorAuthentication.TwoFactorSetup (p0 |> migrate_TwoFactorAuthentication_TwoFactorSetupData)

        Evergreen.V41.TwoFactorAuthentication.TwoFactorComplete ->
            Evergreen.V42.TwoFactorAuthentication.TwoFactorComplete

        Evergreen.V41.TwoFactorAuthentication.TwoFactorAlreadyComplete p0 ->
            Evergreen.V42.TwoFactorAuthentication.TwoFactorAlreadyComplete p0


migrate_Types_AdminStatusLoginData : Evergreen.V41.Types.AdminStatusLoginData -> Evergreen.V42.Types.AdminStatusLoginData
migrate_Types_AdminStatusLoginData old =
    case old of
        Evergreen.V41.Types.IsAdminLoginData p0 ->
            Evergreen.V42.Types.IsAdminLoginData (p0 |> migrate_Pages_Admin_InitAdminData)

        Evergreen.V41.Types.IsNotAdminLoginData ->
            Evergreen.V42.Types.IsNotAdminLoginData


migrate_Types_BackendFileData : Evergreen.V41.Types.BackendFileData -> Evergreen.V42.Types.BackendFileData
migrate_Types_BackendFileData old =
    { fileSize = old.fileSize
    , imageSize = old.imageSize |> Maybe.map (migrate_Coord_Coord migrate_CssPixels_CssPixels)
    }


migrate_Types_ChannelSidebarMode : Evergreen.V41.Types.ChannelSidebarMode -> Evergreen.V42.Types.ChannelSidebarMode
migrate_Types_ChannelSidebarMode old =
    case old of
        Evergreen.V41.Types.ChannelSidebarClosed ->
            Evergreen.V42.Types.ChannelSidebarClosed

        Evergreen.V41.Types.ChannelSidebarOpened ->
            Evergreen.V42.Types.ChannelSidebarOpened

        Evergreen.V41.Types.ChannelSidebarClosing p0 ->
            Evergreen.V42.Types.ChannelSidebarClosing p0

        Evergreen.V41.Types.ChannelSidebarOpening p0 ->
            Evergreen.V42.Types.ChannelSidebarOpening p0

        Evergreen.V41.Types.ChannelSidebarDragging p0 ->
            Evergreen.V42.Types.ChannelSidebarDragging p0


migrate_Types_Drag : Evergreen.V41.Types.Drag -> Evergreen.V42.Types.Drag
migrate_Types_Drag old =
    case old of
        Evergreen.V41.Types.NoDrag ->
            Evergreen.V42.Types.NoDrag

        Evergreen.V41.Types.DragStart p0 p1 ->
            Evergreen.V42.Types.DragStart p0
                (p1 |> migrate_NonemptyDict_NonemptyDict identity migrate_Touch_Touch)

        Evergreen.V41.Types.Dragging p0 ->
            Evergreen.V42.Types.Dragging
                { horizontalStart = p0.horizontalStart
                , touches = p0.touches |> migrate_NonemptyDict_NonemptyDict identity migrate_Touch_Touch
                }


migrate_Types_EditMessage : Evergreen.V41.Types.EditMessage -> Evergreen.V42.Types.EditMessage
migrate_Types_EditMessage old =
    { messageIndex = old.messageIndex |> migrate_Id_Id
    , text = old.text
    , attachedFiles = old.attachedFiles |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_FileStatus_FileStatus) |> SeqDict.fromList
    }


migrate_Types_EmojiSelector : Evergreen.V41.Types.EmojiSelector -> Evergreen.V42.Types.EmojiSelector
migrate_Types_EmojiSelector old =
    case old of
        Evergreen.V41.Types.EmojiSelectorHidden ->
            Evergreen.V42.Types.EmojiSelectorHidden

        Evergreen.V41.Types.EmojiSelectorForReaction p0 p1 ->
            Evergreen.V42.Types.EmojiSelectorForReaction (p0 |> migrate_Id_GuildOrDmId)
                (p1 |> migrate_Id_Id)

        Evergreen.V41.Types.EmojiSelectorForMessage ->
            Evergreen.V42.Types.EmojiSelectorForMessage


migrate_Types_FrontendModel : Evergreen.V41.Types.FrontendModel -> Evergreen.V42.Types.FrontendModel
migrate_Types_FrontendModel old =
    case old of
        Evergreen.V41.Types.Loading p0 ->
            Evergreen.V42.Types.Loading (p0 |> migrate_Types_LoadingFrontend)

        Evergreen.V41.Types.Loaded p0 ->
            Evergreen.V42.Types.Loaded (p0 |> migrate_Types_LoadedFrontend)


migrate_Types_GuildChannelAndMessageId : Evergreen.V41.Types.GuildChannelAndMessageId -> Evergreen.V42.Types.GuildChannelAndMessageId
migrate_Types_GuildChannelAndMessageId old =
    { guildId = old.guildId |> migrate_Id_Id
    , channelId = old.channelId |> migrate_Id_Id
    , messageIndex = old.messageIndex |> migrate_Id_Id
    }


migrate_Types_LastRequest : Evergreen.V41.Types.LastRequest -> Evergreen.V42.Types.LastRequest
migrate_Types_LastRequest old =
    case old of
        Evergreen.V41.Types.NoRequestsMade ->
            Evergreen.V42.Types.NoRequestsMade

        Evergreen.V41.Types.LastRequest p0 ->
            Evergreen.V42.Types.LastRequest p0


migrate_Types_LoadStatus : Evergreen.V41.Types.LoadStatus -> Evergreen.V42.Types.LoadStatus
migrate_Types_LoadStatus old =
    case old of
        Evergreen.V41.Types.LoadingData ->
            Evergreen.V42.Types.LoadingData

        Evergreen.V41.Types.LoadSuccess p0 ->
            Evergreen.V42.Types.LoadSuccess (p0 |> migrate_Types_LoginData)

        Evergreen.V41.Types.LoadError ->
            Evergreen.V42.Types.LoadError


migrate_Types_LoadedFrontend : Evergreen.V41.Types.LoadedFrontend -> Evergreen.V42.Types.LoadedFrontend
migrate_Types_LoadedFrontend old =
    { navigationKey = old.navigationKey
    , route = old.route |> migrate_Route_Route
    , time = old.time
    , timezone = old.timezone
    , windowSize = old.windowSize |> migrate_Coord_Coord migrate_CssPixels_CssPixels
    , virtualKeyboardOpen = old.virtualKeyboardOpen
    , loginStatus = old.loginStatus |> migrate_Types_LoginStatus
    , elmUiState = old.elmUiState |> migrate_Ui_Anim_State
    , lastCopied = old.lastCopied
    , textInputFocus = old.textInputFocus
    , notificationPermission = old.notificationPermission |> migrate_Ports_NotificationPermission
    , pwaStatus = old.pwaStatus |> migrate_Ports_PwaStatus
    , drag = old.drag |> migrate_Types_Drag
    , dragPrevious = old.dragPrevious |> migrate_Types_Drag
    , scrolledToBottomOfChannel = old.scrolledToBottomOfChannel
    , aiChatModel = old.aiChatModel |> migrate_AiChat_FrontendModel
    , enabledPushNotifications = old.enabledPushNotifications
    }


migrate_Types_LoadingFrontend : Evergreen.V41.Types.LoadingFrontend -> Evergreen.V42.Types.LoadingFrontend
migrate_Types_LoadingFrontend old =
    { navigationKey = old.navigationKey
    , route = old.route |> migrate_Route_Route
    , windowSize = old.windowSize |> migrate_Coord_Coord migrate_CssPixels_CssPixels
    , time = old.time
    , loginStatus = old.loginStatus |> migrate_Types_LoadStatus
    , notificationPermission = old.notificationPermission |> migrate_Ports_NotificationPermission
    , pwaStatus = old.pwaStatus |> migrate_Ports_PwaStatus
    , timezone = old.timezone
    , enabledPushNotifications = old.enabledPushNotifications
    }


migrate_Types_LocalChange : Evergreen.V41.Types.LocalChange -> Evergreen.V42.Types.LocalChange
migrate_Types_LocalChange old =
    case old of
        Evergreen.V41.Types.Local_Invalid ->
            Evergreen.V42.Types.Local_Invalid

        Evergreen.V41.Types.Local_Admin p0 ->
            Evergreen.V42.Types.Local_Admin (p0 |> migrate_Pages_Admin_AdminChange)

        Evergreen.V41.Types.Local_SendMessage p0 p1 p2 p3 p4 ->
            Evergreen.V42.Types.Local_SendMessage p0
                (p1 |> migrate_Id_GuildOrDmIdNoThread)
                (p2 |> migrate_List_Nonempty_Nonempty migrate_RichText_RichText)
                (p3 |> migrate_Id_ThreadRouteWithMaybeMessage)
                (p4 |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_FileStatus_FileData) |> SeqDict.fromList)

        Evergreen.V41.Types.Local_NewChannel p0 p1 p2 ->
            Evergreen.V42.Types.Local_NewChannel p0
                (p1 |> migrate_Id_Id)
                (p2 |> migrate_ChannelName_ChannelName)

        Evergreen.V41.Types.Local_EditChannel p0 p1 p2 ->
            Evergreen.V42.Types.Local_EditChannel (p0 |> migrate_Id_Id)
                (p1 |> migrate_Id_Id)
                (p2 |> migrate_ChannelName_ChannelName)

        Evergreen.V41.Types.Local_DeleteChannel p0 p1 ->
            Evergreen.V42.Types.Local_DeleteChannel (p0 |> migrate_Id_Id) (p1 |> migrate_Id_Id)

        Evergreen.V41.Types.Local_NewInviteLink p0 p1 p2 ->
            Evergreen.V42.Types.Local_NewInviteLink p0
                (p1 |> migrate_Id_Id)
                (p2 |> migrate_Types_ToBeFilledInByBackend migrate_SecretId_SecretId)

        Evergreen.V41.Types.Local_NewGuild p0 p1 p2 ->
            Evergreen.V42.Types.Local_NewGuild p0
                (p1 |> migrate_GuildName_GuildName)
                (p2 |> migrate_Types_ToBeFilledInByBackend migrate_Id_Id)

        Evergreen.V41.Types.Local_MemberTyping p0 p1 ->
            Evergreen.V42.Types.Local_MemberTyping p0 (p1 |> migrate_Id_GuildOrDmId)

        Evergreen.V41.Types.Local_AddReactionEmoji p0 p1 p2 ->
            Evergreen.V42.Types.Local_AddReactionEmoji (p0 |> migrate_Id_GuildOrDmId)
                (p1 |> migrate_Id_Id)
                (p2 |> migrate_Emoji_Emoji)

        Evergreen.V41.Types.Local_RemoveReactionEmoji p0 p1 p2 ->
            Evergreen.V42.Types.Local_RemoveReactionEmoji (p0 |> migrate_Id_GuildOrDmId)
                (p1 |> migrate_Id_Id)
                (p2 |> migrate_Emoji_Emoji)

        Evergreen.V41.Types.Local_SendEditMessage p0 p1 p2 p3 p4 ->
            Evergreen.V42.Types.Local_SendEditMessage p0
                (p1 |> migrate_Id_GuildOrDmIdNoThread)
                (p2 |> migrate_Id_ThreadRouteWithMessage)
                (p3 |> migrate_List_Nonempty_Nonempty migrate_RichText_RichText)
                (p4 |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_FileStatus_FileData) |> SeqDict.fromList)

        Evergreen.V41.Types.Local_MemberEditTyping p0 p1 p2 ->
            Evergreen.V42.Types.Local_MemberEditTyping p0
                (p1 |> migrate_Id_GuildOrDmIdNoThread)
                (p2 |> migrate_Id_ThreadRouteWithMessage)

        Evergreen.V41.Types.Local_SetLastViewed p0 p1 ->
            Evergreen.V42.Types.Local_SetLastViewed (p0 |> migrate_Id_GuildOrDmIdNoThread)
                (p1 |> migrate_Id_ThreadRouteWithMessage)

        Evergreen.V41.Types.Local_DeleteMessage p0 p1 ->
            Evergreen.V42.Types.Local_DeleteMessage (p0 |> migrate_Id_GuildOrDmId)
                (p1 |> migrate_Id_Id)

        Evergreen.V41.Types.Local_ViewChannel p0 p1 ->
            Evergreen.V42.Types.Local_ViewChannel (p0 |> migrate_Id_Id) (p1 |> migrate_Id_Id)

        Evergreen.V41.Types.Local_SetName p0 ->
            Evergreen.V42.Types.Local_SetName (p0 |> migrate_PersonName_PersonName)


migrate_Types_LocalMsg : Evergreen.V41.Types.LocalMsg -> Evergreen.V42.Types.LocalMsg
migrate_Types_LocalMsg old =
    case old of
        Evergreen.V41.Types.LocalChange p0 p1 ->
            Evergreen.V42.Types.LocalChange (p0 |> migrate_Id_Id)
                (p1 |> migrate_Types_LocalChange)

        Evergreen.V41.Types.ServerChange p0 ->
            Evergreen.V42.Types.ServerChange (p0 |> migrate_Types_ServerChange)


migrate_Types_LoggedIn2 : Evergreen.V41.Types.LoggedIn2 -> Evergreen.V42.Types.LoggedIn2
migrate_Types_LoggedIn2 old =
    { localState = old.localState |> migrate_Local_Local migrate_Types_LocalMsg migrate_LocalState_LocalState
    , admin = old.admin |> Maybe.map migrate_Pages_Admin_Model
    , drafts = old.drafts |> SeqDict.toList |> List.map (Tuple.mapFirst migrate_Id_GuildOrDmId) |> SeqDict.fromList
    , newChannelForm = old.newChannelForm |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_Types_NewChannelForm) |> SeqDict.fromList
    , editChannelForm = old.editChannelForm |> SeqDict.toList |> List.map (Tuple.mapBoth (Tuple.mapBoth migrate_Id_Id migrate_Id_Id) migrate_Types_NewChannelForm) |> SeqDict.fromList
    , newGuildForm = old.newGuildForm
    , channelNameHover = old.channelNameHover |> Maybe.map (\( t1, t2, t3 ) -> ( t1 |> migrate_Id_Id, t2 |> migrate_Id_Id, t3 |> migrate_Id_ThreadRoute ))
    , typingDebouncer = old.typingDebouncer
    , pingUser = old.pingUser |> Maybe.map migrate_MessageInput_MentionUserDropdown
    , messageHover = old.messageHover |> migrate_Types_MessageHover
    , showEmojiSelector = old.showEmojiSelector |> migrate_Types_EmojiSelector
    , editMessage = old.editMessage |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_GuildOrDmId migrate_Types_EditMessage) |> SeqDict.fromList
    , replyTo = old.replyTo |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_GuildOrDmId migrate_Id_Id) |> SeqDict.fromList
    , revealedSpoilers = old.revealedSpoilers |> Maybe.map migrate_Types_RevealedSpoilers
    , sidebarMode = old.sidebarMode |> migrate_Types_ChannelSidebarMode
    , userOptions = old.userOptions |> Maybe.map migrate_Types_UserOptionsModel
    , twoFactor = old.twoFactor |> migrate_TwoFactorAuthentication_TwoFactorState
    , filesToUpload = old.filesToUpload |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_GuildOrDmId (migrate_NonemptyDict_NonemptyDict migrate_Id_Id migrate_FileStatus_FileStatus)) |> SeqDict.fromList
    , sessionId = old.sessionId
    , isReloading = old.isReloading
    }


migrate_Types_LoginData : Evergreen.V41.Types.LoginData -> Evergreen.V42.Types.LoginData
migrate_Types_LoginData old =
    { userId = old.userId |> migrate_Id_Id
    , adminData = old.adminData |> migrate_Types_AdminStatusLoginData
    , twoFactorAuthenticationEnabled = old.twoFactorAuthenticationEnabled
    , guilds = old.guilds |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_LocalState_FrontendGuild) |> SeqDict.fromList
    , dmChannels = old.dmChannels |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_DmChannel_DmChannel) |> SeqDict.fromList
    , user = old.user |> migrate_User_BackendUser
    , otherUsers = old.otherUsers |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_User_FrontendUser) |> SeqDict.fromList
    , sessionId = old.sessionId
    , publicVapidKey = old.publicVapidKey
    }


migrate_Types_LoginResult : Evergreen.V41.Types.LoginResult -> Evergreen.V42.Types.LoginResult
migrate_Types_LoginResult old =
    case old of
        Evergreen.V41.Types.LoginSuccess p0 ->
            Evergreen.V42.Types.LoginSuccess (p0 |> migrate_Types_LoginData)

        Evergreen.V41.Types.LoginTokenInvalid p0 ->
            Evergreen.V42.Types.LoginTokenInvalid p0

        Evergreen.V41.Types.NeedsTwoFactorToken ->
            Evergreen.V42.Types.NeedsTwoFactorToken

        Evergreen.V41.Types.NeedsAccountSetup ->
            Evergreen.V42.Types.NeedsAccountSetup


migrate_Types_LoginStatus : Evergreen.V41.Types.LoginStatus -> Evergreen.V42.Types.LoginStatus
migrate_Types_LoginStatus old =
    case old of
        Evergreen.V41.Types.LoggedIn p0 ->
            Evergreen.V42.Types.LoggedIn (p0 |> migrate_Types_LoggedIn2)

        Evergreen.V41.Types.NotLoggedIn p0 ->
            Evergreen.V42.Types.NotLoggedIn
                { loginForm = p0.loginForm |> Maybe.map migrate_LoginForm_LoginForm
                , useInviteAfterLoggedIn = p0.useInviteAfterLoggedIn |> Maybe.map migrate_SecretId_SecretId
                }


migrate_Types_LoginTokenData : Evergreen.V41.Types.LoginTokenData -> Evergreen.V42.Types.LoginTokenData
migrate_Types_LoginTokenData old =
    case old of
        Evergreen.V41.Types.WaitingForLoginToken p0 ->
            Evergreen.V42.Types.WaitingForLoginToken (p0 |> migrate_Types_WaitingForLoginTokenData)

        Evergreen.V41.Types.WaitingForTwoFactorToken p0 ->
            Evergreen.V42.Types.WaitingForTwoFactorToken
                { creationTime = p0.creationTime
                , userId = p0.userId |> migrate_Id_Id
                , loginAttempts = p0.loginAttempts
                }

        Evergreen.V41.Types.WaitingForLoginTokenForSignup p0 ->
            Evergreen.V42.Types.WaitingForLoginTokenForSignup
                { creationTime = p0.creationTime
                , emailAddress = p0.emailAddress |> migrate_EmailAddress_EmailAddress
                , loginAttempts = p0.loginAttempts
                , loginCode = p0.loginCode
                }

        Evergreen.V41.Types.WaitingForUserDataForSignup p0 ->
            Evergreen.V42.Types.WaitingForUserDataForSignup
                { creationTime = p0.creationTime
                , emailAddress = p0.emailAddress |> migrate_EmailAddress_EmailAddress
                }


migrate_Types_MessageHover : Evergreen.V41.Types.MessageHover -> Evergreen.V42.Types.MessageHover
migrate_Types_MessageHover old =
    case old of
        Evergreen.V41.Types.NoMessageHover ->
            Evergreen.V42.Types.NoMessageHover

        Evergreen.V41.Types.MessageHover p0 p1 ->
            Evergreen.V42.Types.MessageHover (p0 |> migrate_Id_GuildOrDmId)
                (p1 |> migrate_Id_Id)

        Evergreen.V41.Types.MessageMenu p0 ->
            Evergreen.V42.Types.MessageMenu (p0 |> migrate_Types_MessageMenuExtraOptions)


migrate_Types_MessageHoverMobileMode : Evergreen.V41.Types.MessageHoverMobileMode -> Evergreen.V42.Types.MessageHoverMobileMode
migrate_Types_MessageHoverMobileMode old =
    case old of
        Evergreen.V41.Types.MessageMenuClosing p0 ->
            Evergreen.V42.Types.MessageMenuClosing (p0 |> migrate_Quantity_Quantity)

        Evergreen.V41.Types.MessageMenuOpening p0 ->
            Evergreen.V42.Types.MessageMenuOpening
                { offset = p0.offset |> migrate_Quantity_Quantity
                , targetOffset = p0.targetOffset |> migrate_Quantity_Quantity
                }

        Evergreen.V41.Types.MessageMenuDragging p0 ->
            Evergreen.V42.Types.MessageMenuDragging
                { offset = p0.offset |> migrate_Quantity_Quantity
                , previousOffset = p0.previousOffset |> migrate_Quantity_Quantity
                , time = p0.time
                }

        Evergreen.V41.Types.MessageMenuFixed p0 ->
            Evergreen.V42.Types.MessageMenuFixed (p0 |> migrate_Quantity_Quantity)


migrate_Types_MessageMenuExtraOptions : Evergreen.V41.Types.MessageMenuExtraOptions -> Evergreen.V42.Types.MessageMenuExtraOptions
migrate_Types_MessageMenuExtraOptions old =
    { position = old.position |> migrate_Coord_Coord migrate_CssPixels_CssPixels
    , guildOrDmId = old.guildOrDmId |> migrate_Id_GuildOrDmId
    , isThreadStarter = old.isThreadStarter
    , messageIndex = old.messageIndex |> migrate_Id_Id
    , mobileMode = old.mobileMode |> migrate_Types_MessageHoverMobileMode
    }


migrate_Types_NewChannelForm : Evergreen.V41.Types.NewChannelForm -> Evergreen.V42.Types.NewChannelForm
migrate_Types_NewChannelForm old =
    old


migrate_Types_RevealedSpoilers : Evergreen.V41.Types.RevealedSpoilers -> Evergreen.V42.Types.RevealedSpoilers
migrate_Types_RevealedSpoilers old =
    { guildOrDmId = old.guildOrDmId |> migrate_Id_GuildOrDmId
    , messages = old.messages |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id (migrate_NonemptySet_NonemptySet identity)) |> SeqDict.fromList
    }


migrate_Types_ServerChange : Evergreen.V41.Types.ServerChange -> Evergreen.V42.Types.ServerChange
migrate_Types_ServerChange old =
    case old of
        Evergreen.V41.Types.Server_SendMessage p0 p1 p2 p3 p4 p5 ->
            Evergreen.V42.Types.Server_SendMessage (p0 |> migrate_Id_Id)
                p1
                (p2 |> migrate_Id_GuildOrDmIdNoThread)
                (p3 |> migrate_List_Nonempty_Nonempty migrate_RichText_RichText)
                (p4 |> migrate_Id_ThreadRouteWithMaybeMessage)
                (p5 |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_FileStatus_FileData) |> SeqDict.fromList)

        Evergreen.V41.Types.Server_NewChannel p0 p1 p2 ->
            Evergreen.V42.Types.Server_NewChannel p0
                (p1 |> migrate_Id_Id)
                (p2 |> migrate_ChannelName_ChannelName)

        Evergreen.V41.Types.Server_EditChannel p0 p1 p2 ->
            Evergreen.V42.Types.Server_EditChannel (p0 |> migrate_Id_Id)
                (p1 |> migrate_Id_Id)
                (p2 |> migrate_ChannelName_ChannelName)

        Evergreen.V41.Types.Server_DeleteChannel p0 p1 ->
            Evergreen.V42.Types.Server_DeleteChannel (p0 |> migrate_Id_Id) (p1 |> migrate_Id_Id)

        Evergreen.V41.Types.Server_NewInviteLink p0 p1 p2 p3 ->
            Evergreen.V42.Types.Server_NewInviteLink p0
                (p1 |> migrate_Id_Id)
                (p2 |> migrate_Id_Id)
                (p3 |> migrate_SecretId_SecretId)

        Evergreen.V41.Types.Server_MemberJoined p0 p1 p2 p3 ->
            Evergreen.V42.Types.Server_MemberJoined p0
                (p1 |> migrate_Id_Id)
                (p2 |> migrate_Id_Id)
                (p3 |> migrate_User_FrontendUser)

        Evergreen.V41.Types.Server_YouJoinedGuildByInvite p0 ->
            Evergreen.V42.Types.Server_YouJoinedGuildByInvite
                (p0
                    |> Result.mapError migrate_LocalState_JoinGuildError
                    >> Result.map
                        (\rec1 ->
                            { guildId = rec1.guildId |> migrate_Id_Id
                            , guild = rec1.guild |> migrate_LocalState_FrontendGuild
                            , owner = rec1.owner |> migrate_User_FrontendUser
                            , members = rec1.members |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_User_FrontendUser) |> SeqDict.fromList
                            }
                        )
                )

        Evergreen.V41.Types.Server_MemberTyping p0 p1 p2 ->
            Evergreen.V42.Types.Server_MemberTyping p0
                (p1 |> migrate_Id_Id)
                (p2 |> migrate_Id_GuildOrDmId)

        Evergreen.V41.Types.Server_AddReactionEmoji p0 p1 p2 p3 ->
            Evergreen.V42.Types.Server_AddReactionEmoji (p0 |> migrate_Id_Id)
                (p1 |> migrate_Id_GuildOrDmId)
                (p2 |> migrate_Id_Id)
                (p3 |> migrate_Emoji_Emoji)

        Evergreen.V41.Types.Server_RemoveReactionEmoji p0 p1 p2 p3 ->
            Evergreen.V42.Types.Server_RemoveReactionEmoji (p0 |> migrate_Id_Id)
                (p1 |> migrate_Id_GuildOrDmId)
                (p2 |> migrate_Id_Id)
                (p3 |> migrate_Emoji_Emoji)

        Evergreen.V41.Types.Server_SendEditMessage p0 p1 p2 p3 p4 p5 ->
            Evergreen.V42.Types.Server_SendEditMessage p0
                (p1 |> migrate_Id_Id)
                (p2 |> migrate_Id_GuildOrDmIdNoThread)
                (p3 |> migrate_Id_ThreadRouteWithMessage)
                (p4 |> migrate_List_Nonempty_Nonempty migrate_RichText_RichText)
                (p5 |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_FileStatus_FileData) |> SeqDict.fromList)

        Evergreen.V41.Types.Server_MemberEditTyping p0 p1 p2 p3 ->
            Evergreen.V42.Types.Server_MemberEditTyping p0
                (p1 |> migrate_Id_Id)
                (p2 |> migrate_Id_GuildOrDmIdNoThread)
                (p3 |> migrate_Id_ThreadRouteWithMessage)

        Evergreen.V41.Types.Server_DeleteMessage p0 p1 p2 ->
            Evergreen.V42.Types.Server_DeleteMessage (p0 |> migrate_Id_Id)
                (p1 |> migrate_Id_GuildOrDmId)
                (p2 |> migrate_Id_Id)

        Evergreen.V41.Types.Server_DiscordDeleteMessage p0 ->
            Evergreen.V42.Types.Server_DiscordDeleteMessage (p0 |> migrate_Types_GuildChannelAndMessageId)

        Evergreen.V41.Types.Server_SetName p0 p1 ->
            Evergreen.V42.Types.Server_SetName (p0 |> migrate_Id_Id)
                (p1 |> migrate_PersonName_PersonName)

        Evergreen.V41.Types.Server_DiscordDirectMessage p0 p1 p2 p3 p4 ->
            Evergreen.V42.Types.Server_DiscordDirectMessage p0
                (p1 |> migrate_Discord_Id_Id)
                (p2 |> migrate_Id_Id)
                (p3 |> migrate_List_Nonempty_Nonempty migrate_RichText_RichText)
                (p4 |> Maybe.map migrate_Id_Id)

        Evergreen.V41.Types.Server_PushNotificationsReset p0 ->
            Evergreen.V42.Types.Server_PushNotificationsReset p0


migrate_Types_ToBeFilledInByBackend : (a_old -> a_new) -> Evergreen.V41.Types.ToBeFilledInByBackend a_old -> Evergreen.V42.Types.ToBeFilledInByBackend a_new
migrate_Types_ToBeFilledInByBackend migrate_a old =
    case old of
        Evergreen.V41.Types.EmptyPlaceholder ->
            Evergreen.V42.Types.EmptyPlaceholder

        Evergreen.V41.Types.FilledInByBackend p0 ->
            Evergreen.V42.Types.FilledInByBackend (p0 |> migrate_a)


migrate_Types_ToFrontend : Evergreen.V41.Types.ToFrontend -> Evergreen.V42.Types.ToFrontend
migrate_Types_ToFrontend old =
    case old of
        Evergreen.V41.Types.CheckLoginResponse p0 ->
            Evergreen.V42.Types.CheckLoginResponse (p0 |> Result.map migrate_Types_LoginData)

        Evergreen.V41.Types.LoginWithTokenResponse p0 ->
            Evergreen.V42.Types.LoginWithTokenResponse (p0 |> migrate_Types_LoginResult)

        Evergreen.V41.Types.GetLoginTokenRateLimited ->
            Evergreen.V42.Types.GetLoginTokenRateLimited

        Evergreen.V41.Types.LoggedOutSession ->
            Evergreen.V42.Types.LoggedOutSession

        Evergreen.V41.Types.AdminToFrontend p0 ->
            Evergreen.V42.Types.AdminToFrontend (p0 |> migrate_Pages_Admin_ToFrontend)

        Evergreen.V41.Types.LocalChangeResponse p0 p1 ->
            Evergreen.V42.Types.LocalChangeResponse (p0 |> migrate_Local_ChangeId)
                (p1 |> migrate_Types_LocalChange)

        Evergreen.V41.Types.ChangeBroadcast p0 ->
            Evergreen.V42.Types.ChangeBroadcast (p0 |> migrate_Types_LocalMsg)

        Evergreen.V41.Types.TwoFactorAuthenticationToFrontend p0 ->
            Evergreen.V42.Types.TwoFactorAuthenticationToFrontend (p0 |> migrate_TwoFactorAuthentication_ToFrontend)

        Evergreen.V41.Types.AiChatToFrontend p0 ->
            Evergreen.V42.Types.AiChatToFrontend (p0 |> migrate_AiChat_ToFrontend)

        Evergreen.V41.Types.YouConnected ->
            Evergreen.V42.Types.YouConnected

        Evergreen.V41.Types.ReloadDataResponse p0 ->
            Evergreen.V42.Types.ReloadDataResponse (p0 |> Result.map migrate_Types_LoginData)


migrate_Types_UserOptionsModel : Evergreen.V41.Types.UserOptionsModel -> Evergreen.V42.Types.UserOptionsModel
migrate_Types_UserOptionsModel old =
    { name = old.name |> migrate_Editable_Model
    , botToken = old.botToken |> migrate_Editable_Model
    , publicVapidKey = old.publicVapidKey |> migrate_Editable_Model
    , privateVapidKey = old.privateVapidKey |> migrate_Editable_Model
    }


migrate_Types_WaitingForLoginTokenData : Evergreen.V41.Types.WaitingForLoginTokenData -> Evergreen.V42.Types.WaitingForLoginTokenData
migrate_Types_WaitingForLoginTokenData old =
    { creationTime = old.creationTime
    , userId = old.userId |> migrate_Id_Id
    , loginAttempts = old.loginAttempts
    , loginCode = old.loginCode
    }


migrate_Ui_Anim_State : Evergreen.V41.Ui.Anim.State -> Evergreen.V42.Ui.Anim.State
migrate_Ui_Anim_State old =
    old |> migrate_Internal_Model2_State


migrate_User_AdminUiSection : Evergreen.V41.User.AdminUiSection -> Evergreen.V42.User.AdminUiSection
migrate_User_AdminUiSection old =
    case old of
        Evergreen.V41.User.UsersSection ->
            Evergreen.V42.User.UsersSection

        Evergreen.V41.User.LogSection ->
            Evergreen.V42.User.LogSection


migrate_User_BackendUser : Evergreen.V41.User.BackendUser -> Evergreen.V42.User.BackendUser
migrate_User_BackendUser old =
    { name = old.name |> migrate_PersonName_PersonName
    , isAdmin = old.isAdmin
    , email = old.email |> migrate_User_EmailStatus
    , recentLoginEmails = old.recentLoginEmails
    , lastLogPageViewed = old.lastLogPageViewed
    , expandedSections = old.expandedSections |> SeqSet.map migrate_User_AdminUiSection
    , createdAt = old.createdAt
    , emailNotifications = old.emailNotifications |> migrate_User_EmailNotifications
    , lastEmailNotification = old.lastEmailNotification
    , lastViewed = old.lastViewed |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_GuildOrDmIdNoThread migrate_Id_Id) |> SeqDict.fromList
    , lastViewedThreads = old.lastViewedThreads |> SeqDict.toList |> List.map (Tuple.mapBoth (Tuple.mapBoth migrate_Id_GuildOrDmIdNoThread migrate_Id_Id) migrate_Id_Id) |> SeqDict.fromList
    , lastChannelViewed = old.lastChannelViewed |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_Id_Id) |> SeqDict.fromList
    , icon = old.icon |> Maybe.map migrate_FileStatus_FileHash
    }


migrate_User_EmailNotifications : Evergreen.V41.User.EmailNotifications -> Evergreen.V42.User.EmailNotifications
migrate_User_EmailNotifications old =
    case old of
        Evergreen.V41.User.CheckEvery5Minutes ->
            Evergreen.V42.User.CheckEvery5Minutes


migrate_User_EmailStatus : Evergreen.V41.User.EmailStatus -> Evergreen.V42.User.EmailStatus
migrate_User_EmailStatus old =
    case old of
        Evergreen.V41.User.RegisteredFromDiscord ->
            Evergreen.V42.User.RegisteredFromDiscord

        Evergreen.V41.User.RegisteredDirectly p0 ->
            Evergreen.V42.User.RegisteredDirectly (p0 |> migrate_EmailAddress_EmailAddress)


migrate_User_FrontendUser : Evergreen.V41.User.FrontendUser -> Evergreen.V42.User.FrontendUser
migrate_User_FrontendUser old =
    { name = old.name |> migrate_PersonName_PersonName
    , isAdmin = old.isAdmin
    , createdAt = old.createdAt
    , icon = old.icon |> Maybe.map migrate_FileStatus_FileHash
    }
